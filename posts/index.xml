<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Xangelo.ca</title>
    <link>https://xangelo.ca</link>
    <description>Recent content in Posts on Xangelo.ca</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2011 - 2022</copyright>
    <lastBuildDate>Sat, 20 May 2023 23:36:42 -0400</lastBuildDate><atom:link href="https://xangelo.ca/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> Now Powered by Outlines</title>
      <link>https://xangelo.ca/posts/outliner_blog_update/</link>
      <pubDate>Sat, 20 May 2023 23:36:42 -3600</pubDate>
      
      <guid>https://xangelo.ca/posts/outliner_blog_update/</guid>
      <description>&lt;h1 id=&#34;now-powered-by-outlines&#34;&gt;Now Powered by Outlines&lt;/h1&gt;
&lt;p&gt;One of the things that I do every so often is completely re-write the backend of my blog. I&amp;rsquo;ve mostly hit upon a UI that I like, but I&amp;rsquo;ve swapped out the backend over the years between various custom iterations, wordpress, ghost, and now finally Hugo. This time, I&amp;rsquo;ve swapped out how I write my blog posts - but kept everything else the same.&lt;/p&gt;
&lt;p&gt;The current system allows me to write markdown in vim. I&amp;rsquo;m normally running &lt;code&gt;hugo serve -w&lt;/code&gt; at the same time so I can watch the rendered version of what I&amp;rsquo;m doing as I go. It&amp;rsquo;s sort of like a hacked-together live preview. It works well enough.&lt;/p&gt;
&lt;p&gt;However, for the last 10 years (maybe more?) I&amp;rsquo;ve been a huge fan of outliners. I original started with various projects by &lt;a href=&#34;https://scripting.com&#34;&gt;Dave Winer&lt;/a&gt; and I used almost everything he&amp;rsquo;s written around them for a number of years. I&amp;rsquo;ve also tried tooling like &lt;a href=&#34;https://workflowy.com&#34;&gt;Workflowy&lt;/a&gt; and almost every other infinite-bullet-list tool that came after them. They were all.. fine? I had no real problems with them except that they never really stuck around for very long. They were in a tab in my browser, and my browser has like 100 tabs open at any given time. &lt;/p&gt;
&lt;p&gt;For the last 6 months or so, however, I&amp;rsquo;ve been working on my own outliner. It started as an in-browser tool&amp;hellip; and I quickly moved it to an offline-first desktop app via &lt;a href=&#34;https://tauri.app&#34;&gt;Tauri&lt;/a&gt;. Having it offline first meant a few big things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All the syncing tools just work. Dropbox, rsync, backblaze, s3 as a filesystem. Whatever. It works. All nodes in the outliner are individual json files on your computer. There&amp;rsquo;s an &amp;ldquo;outline&amp;rdquo; file that stitches the nodes together into a tree.  &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building desktop first allowed me to bypass the need for user accounts and passwords. It allowed me to skip out on the complexities of providing reliable encrypted storage to users. I don&amp;rsquo;t need to run a collection of servers and databases and object stores to power this thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since I use this tool across operating systems all day long it slowly ended up being where most of my thoughts for blog ideas end up. And so what I hope to be the final feature of this project was realized: I&amp;rsquo;d love to be able to write my whole blog post in here, and then hit a button to have it publish to my hugo deploy.&lt;/p&gt;
&lt;p&gt;This first iteration uses a lot of hard-coded stuff.. and I&amp;rsquo;ll probably take some time to iron out some of the edge cases around rendering.. but it honestly came together pretty quickly. Since every node in the outliner is markdown it was trivial to put it together. As of right now, I can write my blog post in my outliner, press &lt;code&gt;shift+p&lt;/code&gt; and have it write out a markdown file to my local hugo instance.&lt;/p&gt;
&lt;p&gt;For now, I do some manual reviewing before officially publishing it. For now there&amp;rsquo;s a few more usability things that need to be added like &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;differentiating which posts are published vs. un-published&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;being able to &amp;lsquo;unpublish&amp;rsquo; a node&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But honestly? I&amp;rsquo;m kind of enjoying this right now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designing On-Call</title>
      <link>https://xangelo.ca/posts/on-call/</link>
      <pubDate>Wed, 21 Sep 2022 22:36:23 -3600</pubDate>
      
      <guid>https://xangelo.ca/posts/on-call/</guid>
      <description>&lt;p&gt;On-call is one of those things that all developers end up doing at some point. My goal isn&amp;rsquo;t to discuss the merit of on-call, but rather what the point of on-call is and how to go about designing what “on-call” means at your company. I&amp;rsquo;m going to start at the very beginning because chances are you&amp;rsquo;re already doing it wrong. I should also note that I&amp;rsquo;m looking at this specifically from a SaaS point of view.&lt;/p&gt;
&lt;h2 id=&#34;why-do-devs-go-on-call&#34;&gt;Why do devs go on-call?&lt;/h2&gt;
&lt;p&gt;The point of on-call is simple: People use your app 24/7 relative to you. They may be using it from Italy or Australia or Thailand while you&amp;rsquo;re tucked up in bed in Wisconsin. But for them, it&amp;rsquo;s working hours and they expect your site to be available. But, of course, that&amp;rsquo;s not always possible. Things happen that will inevitably take your project down. In these situations &amp;ldquo;on-call&amp;rdquo; is vital for several reasons: The least of which is solving the problem.&lt;/p&gt;
&lt;p&gt;Normally you go on-call because your founders or manager or a customer noticed that your service was offline when it wasn&amp;rsquo;t supposed to be. People start complaining, it makes some rounds internally, and then eventually ends up at the desks of whoever deployed it. Often that ends up being some kind of &amp;ldquo;infrastructure&amp;rdquo; team (You probably call them DevOps or SREs - why that&amp;rsquo;s wrong is an issue for another time). These folk hear about it, fix the problem, and then go about setting up some alerts to let them know when the issue happens again. Bam, you&amp;rsquo;ve just enabled on-call without any of the good parts. You can all but guarantee that your on-call team is going to end up angry and upset about on-call which will manifest in the worst ways possible.&lt;/p&gt;
&lt;h2 id=&#34;lets-walk-through-the-standard-on-call-process&#34;&gt;Let&amp;rsquo;s walk through the standard on-call process&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s walk through a very high-level on-call process and then we can break it down.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Something breaks&lt;/li&gt;
&lt;li&gt;You find out that something is broken&lt;/li&gt;
&lt;li&gt;You bash at your keyboard until it works again&lt;/li&gt;
&lt;li&gt;You put in some metrics so that if &amp;ldquo;thing&amp;rdquo; happens again, you&amp;rsquo;ll know&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&amp;rsquo;s wrong.&lt;/p&gt;
&lt;p&gt;Ok, it&amp;rsquo;s not wrong - it&amp;rsquo;s just a subset of what &amp;ldquo;on-call&amp;rdquo; really is.&lt;/p&gt;
&lt;p&gt;See the thing that you&amp;rsquo;re REALLY missing is that nowhere in this process have you actually figured out what&amp;rsquo;s going on. Sure you solved a symptom - maybe that symptom is synonymous with the cause. But you don&amp;rsquo;t know, because your process doesn&amp;rsquo;t encompass that.&lt;/p&gt;
&lt;p&gt;To have a good on-call process you have to understand a fundamental truth of on-call: on-call isn&amp;rsquo;t just about engineering. on-call is the culmination of a bunch of different business, product, and culture decisions.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the truth of each step in your process&lt;/p&gt;
&lt;h3 id=&#34;something-breaks&#34;&gt;Something breaks&lt;/h3&gt;
&lt;h4 id=&#34;something&#34;&gt;Something&lt;/h4&gt;
&lt;p&gt;The first thing we need to define is what &amp;ldquo;something&amp;rdquo; is. The easiest thing to do is to take a look at your code repositories. If you’ve broken things down into services, you likely have one repo/service. That’s an easy way to define the boundaries of “something”. But it’s also probably wrong.&lt;/p&gt;
&lt;p&gt;If you have a monolithic codebase in a single repository this is a much harder step for you, and you’ll probably do a better job.&lt;/p&gt;
&lt;p&gt;It’s very easy to define “something” by engineering components - but this isn’t always answering “what” broke, but “how” and “why”. A user doesn’t care that your lambda was opening too many connections to RDS causing a spike in memory which caused your API to lag. They care that they weren’t able to send a cat picture.&lt;/p&gt;
&lt;p&gt;When defining your “something” start with user flows. Look at your application and define “core” actions that your user can take. From there, simplify until you have a handful of actions that you want a user to be able to do All the Time.&lt;/p&gt;
&lt;h4 id=&#34;broke&#34;&gt;Broke&lt;/h4&gt;
&lt;p&gt;Defining the &amp;ldquo;something&amp;rdquo; is relatively easy compared to defining &amp;ldquo;broken&amp;rdquo;. We know a thing is broken if it&amp;rsquo;s not starting, but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if it works but 1% of the requests are resulting in an error?&lt;/li&gt;
&lt;li&gt;What if it works but 1% of the time it crashes and restarts?&lt;/li&gt;
&lt;li&gt;What if it works but is very slow?&lt;/li&gt;
&lt;li&gt;What if it works, is not slow, and doesn&amp;rsquo;t crash, but your API docs don&amp;rsquo;t match what the endpoint is returning?&lt;/li&gt;
&lt;li&gt;What if it works, but your database is being crushed by a sudden increase in traffic?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Defining our “something” first is important because it helps us to set bounds on what we consider “broke” and what is “degraded” and what is “fine”.&lt;/p&gt;
&lt;p&gt;Perhaps we don&amp;rsquo;t care if 1% of requests fail.. maybe we don&amp;rsquo;t care if 0.1% of requests fail. Defining these thresholds is tough because it requires realistically looking at our application and deciding what is &amp;ldquo;acceptable&amp;rdquo; and what is not. Sometimes we have to make difficult choices here. Maybe we want 0.1% to be considered broken.. but actually, 1% is broken. This is where we impact your actual application.&lt;/p&gt;
&lt;p&gt;Deciding 0.1% of errors is &amp;ldquo;broken&amp;rdquo; where your application is currently sitting at 1% may seem like a good thing. 0.1% is where we want to be and so letting devs know when that isn&amp;rsquo;t the case is good. We can work toward 0.1%. But this involves much larger product considerations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When these alerts happen overnight - are devs tasked with a complete resolution during work hours?&lt;/li&gt;
&lt;li&gt;Does that mean feature work will suffer?&lt;/li&gt;
&lt;li&gt;How will you buffer your sprint to make time for these interruptions?&lt;/li&gt;
&lt;li&gt;Do you have the ability to buffer your sprint given product launch dates?&lt;/li&gt;
&lt;li&gt;What happens when a dev is up all night dealing with issues, do they take the next day off?&lt;/li&gt;
&lt;li&gt;Do you offload the task to a different team (Ops/Infra/SRE) since feature work is so important?&lt;/li&gt;
&lt;li&gt;What happens when those teams get burnt out and leave?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the flip side setting your alerts at 1% is accepting that this is the current state.. but now it becomes a decision on whether or not a 0.1% error rate is more important than the next feature you&amp;rsquo;re supposed to get out.&lt;/p&gt;
&lt;p&gt;Defining the state of &amp;ldquo;broken&amp;rdquo; is hard because it is the intersection of the current and future state of our application, while simultaneously being the fulcrum that will help tip the scales between &amp;ldquo;acceptable&amp;rdquo; and &amp;ldquo;unacceptable&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s no right answer here - just an answer for your team, for right now. Whatever you decide today, the most important thing is that you re-evaluate it and allow those that are on-call to provide feedback on if this was a reasonable level of &amp;ldquo;broken&amp;rdquo;.&lt;/p&gt;
&lt;h4 id=&#34;service-level-objectives&#34;&gt;Service Level Objectives&lt;/h4&gt;
&lt;p&gt;By defining what broken means you&amp;rsquo;ve now set a baseline stat for your systems. You&amp;rsquo;ve defined your first Service Level Objective (SLO). Yay!&lt;/p&gt;
&lt;p&gt;In the nutshell, SLOs form the baseline for your Service Level Agreements (SLA) with customers. Your SLA can&amp;rsquo;t be better than your SLO or you&amp;rsquo;re going to have to sacrifice on feature development to bring them up to speed. Now we can talk about all kinds of marketing tricks you can do (mainly playing with the measurement period) but the truth is if your SLO defines a particular flow as &amp;ldquo;broken&amp;rdquo; it sets the floor for your SLA. You can only promise less than that until you invest in improving that SLO.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s move on to the 2&lt;!-- raw HTML omitted --&gt;nd&lt;!-- raw HTML omitted --&gt; step.&lt;/p&gt;
&lt;h3 id=&#34;you-find-out-that-something-is-broken&#34;&gt;You find out that something is broken&lt;/h3&gt;
&lt;h4 id=&#34;whats-on-first&#34;&gt;What&amp;rsquo;s on first?&lt;/h4&gt;
&lt;p&gt;Ok. something is definitely broken. How do you find out?&lt;/p&gt;
&lt;p&gt;This is probably the most technically straightforward piece, but the one that has the most impact on people.&lt;/p&gt;
&lt;p&gt;When something is broken, an alert is generated you get notified.&lt;/p&gt;
&lt;p&gt;The first step is figuring out how you get data out of your system into a place that can perform some analysis and generate these alerts. The two big products here are Datadog and NewRelic. These are all-in-one solutions that allow you to instrument your application and gather metrics+logs+events and put them somewhere you can visualize them. These systems also allow you to create “alerts” that get generated based on the data you’ve been feeding it.&lt;/p&gt;
&lt;p&gt;Given that you now know what you consider critical user flows your goal is to go through your application and ensure that everything that supports these flows is properly instrumented. This is where we start looking at the different infrastructure components. This is where we learn how/why our system broke. This is an important step - it&amp;rsquo;s easy to think that devs should just &amp;ldquo;go through and instrument everything&amp;rdquo;, but that makes things harder to reason about. You&amp;rsquo;re increasing your &amp;ldquo;noise&amp;rdquo; and when you&amp;rsquo;re looking at a Signal vs. Noise ratio, you want to keep your noise to a minimum.&lt;/p&gt;
&lt;p&gt;Take a look at your SLOs -&amp;gt; and then define your Service Level Indicators (SLI).&lt;/p&gt;
&lt;h4 id=&#34;service-level-indicators&#34;&gt;Service Level Indicators&lt;/h4&gt;
&lt;p&gt;These are the metrics that you can look at to identify that you&amp;rsquo;re meeting your SLOs. They&amp;rsquo;re often aggregate metrics. If your objective is a 1% error rate, your SLI will likely ensure that you are getting an accurate count of errors vs. successful requests across your system. That will involve you going through various systems and making sure that your code base is sending appropriate logs. It&amp;rsquo;ll also be going through your monitoring tooling and creating dashboards/alerts so you can view your SLI and all the subcomponents that make up your SLI easily.&lt;/p&gt;
&lt;p&gt;Now that we have these metrics, and we know what we consider “broken” we can tune our alarms. When one of these components is in a state that impacts our user flow - thats an alert.&lt;/p&gt;
&lt;p&gt;That alert is going to be sent to whomever is on-call.&lt;/p&gt;
&lt;h4 id=&#34;whos-on-first&#34;&gt;Who’s on first?&lt;/h4&gt;
&lt;p&gt;Everyone in Engineering that is responsible for writing code that could end up affecting a user.&lt;/p&gt;
&lt;p&gt;Bam. Easiest decision ever.&lt;/p&gt;
&lt;p&gt;But you&amp;rsquo;ll likely face some pushback from teams that don&amp;rsquo;t normally see themselves as &amp;ldquo;needing to be in rotation&amp;rdquo;. Doesn&amp;rsquo;t matter - at some point you have to make a decision and this is one hill you must die on as a manager.&lt;/p&gt;
&lt;p&gt;Traditionally on-call was reserved for infrastructure/devops/sre groups and developers weren&amp;rsquo;t required to be on-call. This is a silly separation of concerns. The people who wrote the code that likely resulted in user impacts are often not from your infrastructure/platform team -&amp;gt; they&amp;rsquo;re likely from the application team. This should be your first tier of on-call when thinking about SLOs from the product.&lt;/p&gt;
&lt;p&gt;Often you&amp;rsquo;ll end up with a rotation of engineers, probably daily, with multiple tiers.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The primary: They&amp;rsquo;re the first ones to get alerted about an issue&lt;/li&gt;
&lt;li&gt;The secondary: If alerts to the primary don&amp;rsquo;t get acknowledged, it goes to this person&lt;/li&gt;
&lt;li&gt;The backup: If primary AND secondary are not responding -&amp;gt; this person is here.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You may decide to have different schedules for weekdays/weekends but in the end the goal is to cycle through all developers without making it feel like anyones &amp;ldquo;job&amp;rdquo; is to be on-call.&lt;/p&gt;
&lt;p&gt;Now that you have your schedule, you must know that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Everyone should feel empowered to schedule alternates if they&amp;rsquo;re busy. If I&amp;rsquo;m scheduled tomorrow night and something comes up - I should feel comfortable addressing the engineering team as a whole and asking someone to trade with me. Likewise, you should feel comfortable saying no.&lt;/li&gt;
&lt;li&gt;No one should treat on-call as being stuck at the computer. This does end up personal preference for engineers, but if you&amp;rsquo;re on-call you should be able to take your laptop/phone with you where you go. If your company is not technically ready for this, then you better be compensating your employees well for tying them to their homes outside of work hours.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;you-bash-at-your-keyboard-until-it-works-again&#34;&gt;You bash at your keyboard until it works again&lt;/h3&gt;
&lt;p&gt;Alright. It&amp;rsquo;s 3 am, something broke, you were paged. You hop on your computer, bleary-eyed and upset because it&amp;rsquo;s chillier than you expected because you forgot your pants in the rush to deal with this situation.&lt;/p&gt;
&lt;p&gt;Relax.&lt;/p&gt;
&lt;p&gt;Your job is not to solve the problem - your job is to ensure that your application is performing as expected.&lt;/p&gt;
&lt;p&gt;Solving the problem is a task that is best left to those on full nights of sleep. When it&amp;rsquo;s 3 am and you finally manage to log into your laptop, &amp;ldquo;solving&amp;rdquo; the problem should be the furthest thing from your mind. The goal is to mitigate the outage and restore acceptable functionality based on your SLOs.&lt;/p&gt;
&lt;p&gt;In some cases simply restarting a process is enough to get things back to working. Sometimes you may need to upsize a database.&lt;/p&gt;
&lt;p&gt;What you should NOT be required to do, is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;figure out where your application code is crashing&lt;/li&gt;
&lt;li&gt;optimize that weird nested join that you&amp;rsquo;re supposed to tackle next sprint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your job at 3 am is problem mitigation. Maybe nothing can be done except throw on a status message so that users know what&amp;rsquo;s happening.&lt;/p&gt;
&lt;p&gt;Perhaps this alert is fine, this level of error is acceptable.. so you can just adjust your alerting and call it a night.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t attempt to be smart at 3 am because when you get paged at 6 am you&amp;rsquo;ll be much worse off trying to decipher what you did.&lt;/p&gt;
&lt;p&gt;This is often where we run into issues. Engineers like to solve problems. When we get an alert we dig in. We want to fully understand what&amp;rsquo;s happening because we can easily over/under complicate an issue. Oh is CPU on the DB at 100%? Do we need to just upsize the database? Are we locking something? Is there some periodic system running?&lt;/p&gt;
&lt;p&gt;Sometimes the problem is obvious and fixing the symptom is the same as fixing the problem. It&amp;rsquo;s much harder when the problem isn&amp;rsquo;t obvious. Rememeber that while you&amp;rsquo;re &amp;ldquo;digging in&amp;rdquo; this is impacting users - otherwise it wouldn&amp;rsquo;t be alerting you right? As unnatural and silly as it seems, at 3 am -&amp;gt; solve the symptom for immediate relief. Then when you&amp;rsquo;re not stressed, solve the problem.&lt;/p&gt;
&lt;p&gt;Again: Solving the problem at 3 am is not your job.&lt;/p&gt;
&lt;p&gt;Once you fix the symptom causing the alert and verify that things are working again - leave notes in a public place. Explain what you did and why. The why is the most important part. This is that when you or whomever else logs in the following day and looks over what happened &amp;ldquo;on-call&amp;rdquo; you can easily decipher your thought process and areas that you should begin looking to resolve the underlying problem.&lt;/p&gt;
&lt;h3 id=&#34;you-put-in-some-metrics-so-that-if-thing-happens-again-youll-know&#34;&gt;You put in some metrics so that if &amp;ldquo;thing&amp;rdquo; happens again, you&amp;rsquo;ll know&lt;/h3&gt;
&lt;p&gt;This is the easiest part: Once you identify the &amp;ldquo;root cause&amp;rdquo; of your problem, get some metrics/logs in place so that you know. Don&amp;rsquo;t forget to include the metric in any SLI calculations that you might need.&lt;/p&gt;
&lt;h2 id=&#34;compensation&#34;&gt;Compensation&lt;/h2&gt;
&lt;p&gt;Your propensity for compensation is entirely dependent on your org and the legalities of where you reside. In some situations you will have to pay engineers overtime for on-call. In some you can get away it.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t be a jerk.&lt;/p&gt;
&lt;p&gt;Whatever you decide to do understand that your team will leave if they think they&amp;rsquo;re getting a bad deal. on-call is requesting something of your team outside of normal working hours. It doesn&amp;rsquo;t matter if you put it in a contract, it doesn&amp;rsquo;t matter if it was on the job description. You are requesting something of your team that is above their work day.&lt;/p&gt;
&lt;p&gt;If an on-call night was rough, let them take the following day off. If they&amp;rsquo;ve been having a bad week personally, remind them that its&amp;rsquo; ok if they want to move their on-call.&lt;/p&gt;
&lt;h2 id=&#34;your-on-call-process&#34;&gt;Your On-Call Process&lt;/h2&gt;
&lt;p&gt;Finally, you&amp;rsquo;ve ready all that and are ready to implement a real &amp;ldquo;on-call&amp;rdquo; process. Here&amp;rsquo;s what it should look like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify your SLOs&lt;/li&gt;
&lt;li&gt;Identify your SLIs&lt;/li&gt;
&lt;li&gt;Work to track metrics/logs that relate to your SLIs&lt;/li&gt;
&lt;li&gt;Create an on-call rotation&lt;/li&gt;
&lt;li&gt;Something breaks&lt;/li&gt;
&lt;li&gt;You find out that something is broken&lt;/li&gt;
&lt;li&gt;You mitigate the problem&lt;/li&gt;
&lt;li&gt;You put in some metrics so that if &amp;ldquo;thing&amp;rdquo; happens again, you&amp;rsquo;ll know&lt;/li&gt;
&lt;li&gt;You revisit the alert the morning after to figure out root cause&lt;/li&gt;
&lt;li&gt;You resolve the actual problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;your-on-call-process-in-practice&#34;&gt;Your On-Call Process in Practice&lt;/h2&gt;
&lt;p&gt;The truth is, there&amp;rsquo;s a huge difference from the &amp;ldquo;ideal&amp;rdquo; process and what you end up with in practice. So much of this is up to the people involved and the culture of the workplace. Chances are you already have some of this implemented and it kinda works for you mostly.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s ok.&lt;/p&gt;
&lt;p&gt;The goal here is that you understand ideal, and you understand where you are. And now you have the information to be able to make trade-offs. Expending your entire development capital on the first 3 items on this process before getting to the next is silly.&lt;/p&gt;
&lt;p&gt;Instead this process is more of a &amp;ldquo;Flow&amp;rdquo;. If you understand ther flow, you can understand how each thing feeds into the next. When you know that you can better break down your approach.&lt;/p&gt;
&lt;p&gt;You probably have Service Level Agreements (SLAs) with your customers. And you likely have some rough SLOs/SLIs that track that. Solidify them. Make them available to the team on demand and make sure that they&amp;rsquo;re accurate.&lt;/p&gt;
&lt;p&gt;The on-call process is a larger movement within your engineering organization that pushes the whole team toward excellence: Both technical in being able to understand the inner-workings of your application and all the components, but also of your product. If your SLAs are at 99% uptime, but you&amp;rsquo;re sitting at 99.9% uptime -&amp;gt; that&amp;rsquo;s an excellent way to upsell. Likewise, if your uptime is actually at 98% you now know exactly the area your team will need to focus on next.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Understand that no matter your best efforts, pages will be missed. Bugs will go undetected. Users will be upset. But these are short-term issues. You can fix bugs. You can explain to users. You can tell your devs that this push is temporary.&lt;/p&gt;
&lt;p&gt;Do understand the difference between pages being missed and pages being ignored - call your team out on it however you need. Missing a page isn&amp;rsquo;t just letting customers down, it&amp;rsquo;s letting your team down. If it happens frequently enough the team will either think that the alert isn&amp;rsquo;t important or that an individual is above the on-call rotation. It&amp;rsquo;ll foster all kinds of interpersonal problems.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t treat on-call as the solution to your stability and reliability issues. Reacting is not being proactive. When alerts happen overnight, ensure that there is SOME mechanism to address the root cause reasonably.&lt;/p&gt;
&lt;p&gt;If you are running into issues with this, reach out - I&amp;rsquo;d love to chat. I&amp;rsquo;ve been doing this for a long time and I love to help out. I set aside a few hours a week to donate to help companies and individuals make sense of these kinds of larger scale engineering problems. My email is at the bottom of every page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Removing the Default Font</title>
      <link>https://xangelo.ca/posts/default-font/</link>
      <pubDate>Thu, 31 Mar 2022 00:07:57 -0700</pubDate>
      
      <guid>https://xangelo.ca/posts/default-font/</guid>
      <description>&lt;p&gt;This is a small change that I&amp;rsquo;ve made to the site that I&amp;rsquo;ve actually been thinking about for quite some time. I&amp;rsquo;ve always had a monospaced font configured in my CSS, forcing all text into whatever the default monospace font on your system is.&lt;/p&gt;
&lt;p&gt;Personally I like monospaced fonts - but then again, I spend a lot of my time looking at them so it&amp;rsquo;s only inevitable.&lt;/p&gt;
&lt;p&gt;However, monospaced fonts arose to solve a technical problem that original typesetters had long since solved.&lt;/p&gt;
&lt;h2 id=&#34;monospaced-font&#34;&gt;Monospaced Font&lt;/h2&gt;
&lt;p&gt;A monospaced font is a font that has a &amp;ldquo;fixed with&amp;rdquo;. When you look at a word in a monospaced font, it&amp;rsquo;s not that each character is the same size, but rather the area that contains each character is the same size.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xangelo.ca/img/monospace.png&#34; alt=&#34;Font Spaces&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this image we can see how a monospace font is &amp;ldquo;set&amp;rdquo;. Whenever a character appears on the screen, these &amp;ldquo;boxes&amp;rdquo; surrounding them denote their bounds. In a monospace&amp;rsquo;f font, the bounding box for each character is the same size. The size of the character and its placement within the box may vary - but by standardizing on the bounding box size it will appear that each character is the same &amp;ldquo;width&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This is very cool stuff.&lt;/p&gt;
&lt;p&gt;Since each character has a bounding box that&amp;rsquo;s the same size as every other character we actually run into a very specific instance of a cool typography side-effect known as &lt;a href=&#34;https://en.wikipedia.org/wiki/River_(typography)&#34;&gt;Rivers&lt;/a&gt;. Each character aligns itself perfectly with the character above and below it, creating a giant grid of characters on your screen.&lt;/p&gt;
&lt;p&gt;But this isn&amp;rsquo;t always the best for reading.&lt;/p&gt;
&lt;h2 id=&#34;proportional-font&#34;&gt;Proportional Font&lt;/h2&gt;
&lt;p&gt;A proportional font is one that allows the bounding box for any individual character to vary. This has the side-effect of allowing for much narrow kerning (the space between letters) and does 100% lead to improved legibility (see &lt;a href=&#34;https://journals.sagepub.com/doi/pdf/10.1177/001872088302500303&#34;&gt;this study here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xangelo.ca/img/proportional.png&#34; alt=&#34;Proportional Font&#34;&gt;&lt;/p&gt;
&lt;p&gt;By varying the kerning and allowing each character to use as much space as it needs, font designers can really tweak the legibility of the font.&lt;/p&gt;
&lt;h2 id=&#34;why-does-any-of-this-matter&#34;&gt;Why does any of this matter?&lt;/h2&gt;
&lt;p&gt;We know that monospaced fonts improve the legibility of text in SOME cases, like reading code or if the reader has a disability like dyslexia. In all other cases, proportional fonts improve legibility. Serifs in generally tend to be chosen by popular type users (newspapers for example) because of their legibility.&lt;/p&gt;
&lt;p&gt;All of this means that&amp;hellip; me setting the default font to be a monospace font is actually a problem for legibility. By leaving this setting blank and using the browser defaults, I can ensure that you are reading the content of this site how you would best consume it. I&amp;rsquo;ve taken a lot of time to ensure that things like dark/light modes respect user settings. I&amp;rsquo;ve spent longer than I would have liked getting the right shades of blue/purple (the default unvisited/visited link colors) so that they are the same in dark/light modes. The only thing I didn&amp;rsquo;t do was think about the font - I just set it to monospaced since I like it and went about my day.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve since decided to remove that setting, allowing your browser/system defaults to set the primary font on the site. After all, what matters on this site is the content and you should be able to view that as you&amp;rsquo;d like.&lt;/p&gt;
&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;
&lt;p&gt;The study linked looks specifically at fixed vs. variable letter width (monospace vs. proportional) for televised text. This is particularly relevant since we&amp;rsquo;re talking about screens rather than print. The differences cited are also quite marginal - but that&amp;rsquo;s the point of this font change. To the majority of users it won&amp;rsquo;t make a difference, but to a small few it will matter a lot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gitweb - a GitHub/GitLab alternative</title>
      <link>https://xangelo.ca/posts/gitweb/</link>
      <pubDate>Thu, 24 Mar 2022 01:29:37 -2900</pubDate>
      
      <guid>https://xangelo.ca/posts/gitweb/</guid>
      <description>&lt;h2 id=&#34;owning-your-digital-space&#34;&gt;Owning Your Digital Space&lt;/h2&gt;
&lt;p&gt;Over the last year or so I&amp;rsquo;ve slowly pushed further and further into the idea of
owning your digital space. Part of that has been re-evaluating all of the
services online that I think of as &amp;ldquo;necessary&amp;rdquo;. One of these such services has
been GitHub.&lt;/p&gt;
&lt;p&gt;The more I dive into development processes the more I find that they are all
centered around the idea that in order for you to be a &amp;ldquo;developer&amp;rdquo; it mostly
requires that you buy into the idea of centralized forges like GitHub/GitLab.
But these very ideas make it harder and harder to actually get work done. All
development over the last few years has been about dealing with changes that
GitHub has brought about. Don&amp;rsquo;t get me wrong - GitHub really does have some
wonderful services and they&amp;rsquo;ve done a lot for visibility and getting people
involved in OS projects.&lt;/p&gt;
&lt;p&gt;But they definitely shouldn&amp;rsquo;t be the only game in town.&lt;/p&gt;
&lt;p&gt;In an attempt to take some control back from the major forges, I&amp;rsquo;ve been
experimenting with a small tool called gitweb.&lt;/p&gt;
&lt;h2 id=&#34;gitweb&#34;&gt;gitweb&lt;/h2&gt;
&lt;p&gt;gitweb is a very simple tool - it allows you to browse all the git repositories
within a specified folder. You simply install gitweb, point nginx over to it,
and edit a single configuration file. You immediately get&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A browser for all local git projects&lt;/li&gt;
&lt;li&gt;A tree view for your repos with raw file previews&lt;/li&gt;
&lt;li&gt;Commit history w/ colorized diffs&lt;/li&gt;
&lt;li&gt;Snapshot downloads&lt;/li&gt;
&lt;li&gt;RSS feed tracking commit history&lt;/li&gt;
&lt;li&gt;Search (with regex) throughout your repos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For personal projects, or even for small collaborative projects gitweb provides
more than enough functionality.&lt;/p&gt;
&lt;p&gt;The two features that I think are missing from gitweb are Issue Tracking and
Merge Requests. I don&amp;rsquo;t think these are necessarily features that have any place
in gitweb itself, but it means as a replacement for a centralized forge today,
you probably need to rely on additional tooling.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-gitweb&#34;&gt;Setting up gitweb&lt;/h2&gt;
&lt;p&gt;Actually setting up gitweb was surprisingly easy.&lt;/p&gt;
&lt;h3 id=&#34;installing-gitweb&#34;&gt;Installing gitweb&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install gitweb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;configuring-gitweb&#34;&gt;Configuring gitweb&lt;/h3&gt;
&lt;p&gt;The gitweb configuration file is located at &lt;code&gt;/etc/gitweb.conf&lt;/code&gt;. Installing
gitweb automatically populates this file with some of the defaults. It&amp;rsquo;s a very tiny
file and honestly you don&amp;rsquo;t need to touch most of it to get going. The only
thing that&amp;rsquo;s required is setting the &lt;code&gt;$projectroot&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-inf&#34; data-lang=&#34;inf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$projectroot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/gitfolders&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;configuring-nginx&#34;&gt;Configuring nginx&lt;/h3&gt;
&lt;p&gt;Most of the tutorials about getting gitweb going seem to be primarily apache
related. I haven&amp;rsquo;t personally used apache in close to 10 years now - mostly
living in nginx land. Here&amp;rsquo;s a very short snippet to get your nginx config going
to actually serve gitweb.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;git.xangelo.ca&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/index.cgi&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/share/gitweb/&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;fastcgi_params&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;gzip&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fastcgi_param&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;SCRIPT_NAME&lt;/span&gt; $uri;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fastcgi_param&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;GITWEB_CONFIG&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/gitweb.conf&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fastcgi_pass&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;unix:/var/run/fcgiwrap.socket&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/share/gitweb/&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;index.cgi&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;All the paths included are the default locations of things gitweb configures.
The entire block should work for you if you just change the &lt;code&gt;server_name&lt;/code&gt;
directive.&lt;/p&gt;
&lt;h2 id=&#34;further-customizing&#34;&gt;Further Customizing&lt;/h2&gt;
&lt;p&gt;Unfortunately not all the configuration options are specified in the
configuration file that&amp;rsquo;s generated. Reading the source will get you a list
pretty quick but if you don&amp;rsquo;t feel like it, here&amp;rsquo;s a few other params I changed
up.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-inf&#34; data-lang=&#34;inf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sets the title in the &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; html tag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$site_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My Site&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# by default the root of your gitweb is called &amp;#34;projects&amp;#34;. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# I simply changed that to Home and explicitly set the url &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# that users get directed to when they click it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$home_link_str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Home&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$home_link&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://git.xangelo.ca&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# There&amp;#39;s a small &amp;#34;Header&amp;#34; section above the project listing &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# that you can customize with whatever text you want. This &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# allows you to specify an html  file that should be used &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in that area&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$home_text&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/file.html&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# since all of these repos are mine, I don&amp;#39;t list the owner&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# so I&amp;#39;ve disabled this prop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$omit_owner&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Git Docs: &lt;a href=&#34;https://git-scm.com/docs/gitweb.html&#34;&gt;https://git-scm.com/docs/gitweb.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gitweb Source: &lt;a href=&#34;https://repo.or.cz/w/git.git/tree/HEAD:/gitweb/&#34;&gt;https://repo.or.cz/w/git.git/tree/HEAD:/gitweb/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My projects: &lt;a href=&#34;https://git.xangelo.ca&#34;&gt;https://git.xangelo.ca&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Code Reviews Are Failure</title>
      <link>https://xangelo.ca/posts/code-reviews-are-failure/</link>
      <pubDate>Thu, 24 Feb 2022 11:05:34 -0500</pubDate>
      
      <guid>https://xangelo.ca/posts/code-reviews-are-failure/</guid>
      <description>&lt;h2 id=&#34;code-reviews-are-afailure&#34;&gt;Code Reviews are a Failure&lt;/h2&gt;
&lt;p&gt;As a new startup with one or two engineers on staff, you&amp;rsquo;re very likely not doing code reviews. Engineers at this stage have a very deep understanding of the code - after all, they&amp;rsquo;ve probably written most of it. When it&amp;rsquo;s time for a new feature, these initial developers know exactly how they&amp;rsquo;re going to implement it given the architecture of their code base. Chances are, they keep their own work in a branch, and open a Pull Request or Merge Request, but they aren&amp;rsquo;t asking someone to take a look at it. Instead they&amp;rsquo;re making sure their changes work and they&amp;rsquo;re merging it in themselves. Often they&amp;rsquo;ll do this many times a day as they crank out features and bug fixes.&lt;/p&gt;
&lt;p&gt;At some point things are going better than they were and this small group of engineers start adding more! Now you have 5 or 6 engineers, all with varying familiarity of your code base. This is generally the first time Code Reviews come about - and normally for good reason. Often someone has pushed some code to production that has broken things and the developers take a step back and realize that maybe before they push code, it&amp;rsquo;s best if they have others review it. Perhaps bugs like this can be caught next time. And so they come up with rules and reasons for why they need Code Reviews. Non technical managers think &amp;ldquo;Ah, this won&amp;rsquo;t happen again - we&amp;rsquo;re instituting code reviews now!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve all seen the reasons for Code Reviews:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find bugs further downstream&lt;/li&gt;
&lt;li&gt;Propagation of Knowledge&lt;/li&gt;
&lt;li&gt;Team Ownership&lt;/li&gt;
&lt;li&gt;Double check functionality/architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are nonsense - Code Reviews in isolation almost always end up with the following results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reviews languishing in a &amp;ldquo;Ready for Review&amp;rdquo; state&lt;/li&gt;
&lt;li&gt;Drastic code architecture changes&lt;/li&gt;
&lt;li&gt;Being &amp;ldquo;Approved&amp;rdquo; based on social standing of the developer opening the request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code Reviews are often seen as some kind of magic bullet to catching errors before they get merged into code bases. The ideal is that a developer gets a ticket, makes some code changes, and then shares those changes with everyone else on the team for feedback. The idea is that other developers, with perhaps more context, can catch potential issues or side-effects in the code that the developer doing the work may not have even known about.&lt;/p&gt;
&lt;p&gt;Why the heck are you waiting until things are &amp;ldquo;Ready for Review&amp;rdquo; before you share you knowledge and context with the developer doing the task? Why are you telling them to &amp;ldquo;open a draft request as they go&amp;rdquo; so that you can share with them little tidbits of knowledge along the way.&lt;/p&gt;
&lt;p&gt;Why do Code Reviews fail? Because it moves in-depth planning to the end of the development process once someone is already &amp;ldquo;done&amp;rdquo; mentally with a task.&lt;/p&gt;
&lt;h2 id=&#34;the-opposite-of-codereviews&#34;&gt;The Opposite of Code Reviews&lt;/h2&gt;
&lt;p&gt;The opposite of Code Reviews isn&amp;rsquo;t NO code reviews.&lt;/p&gt;
&lt;p&gt;The opposite of Code Reviews is Planning!&lt;/p&gt;
&lt;p&gt;Let me regale you with tales of how development works in the Open Source world. I specifically pick the Open Source community because they operate the opposite way of most startups. Both have no budget, but OS communities have much longer (almost.. undefined in some cases) delivery times for new features. But not just any Open Source community - I&amp;rsquo;m specifically going to target communities that were around before 2008. Old Open Source. I&amp;rsquo;m doing this specifically to highlight not just the mechanisms that were used, but also how they contributed to this default of Planning over Code Reviews.&lt;/p&gt;
&lt;p&gt;When a new feature was proposed - it didn&amp;rsquo;t just appear on an issue board somewhere. Instead someone had to find the mailing list for a piece of software, get ON that mailing list, and then send an email to the development group explaining in detail what your feature was. If you were not clear, chances are you&amp;rsquo;d simply receive a short email asking for more explanation about a certain part, or possibly just outright dismissal of your idea. In either case, you&amp;rsquo;d end up needing to explain yourself further.&lt;/p&gt;
&lt;p&gt;At some point someone on the development team might agree that your idea should be a feature. At this point, they start digging into the code. They probably aren&amp;rsquo;t making the changes you need for your feature, but they&amp;rsquo;re validating how they would go about implementing it. A followup email you may receive would actually include code snippets, specific files/line-numbers to reference, and links to external documentation.&lt;/p&gt;
&lt;p&gt;This all happens in public. Other developers that see that email may realize that they have more context, and will chime in with additional edge cases, more documentation, maybe more code! This will likely go on for a while. Days is obscenely fast. Weeks is more reasonable. Eventually what will happen is that you&amp;rsquo;ll end up with an email that details the goals for the feature, and a flurry of emails outlining the best way to go about it - complete with links to documentation, code, and even code snippets to implement the feature.&lt;/p&gt;
&lt;p&gt;The goal for this email activity isn&amp;rsquo;t to code the feature - it&amp;rsquo;s to get it to the point that anyone can pick up this email chain and implement the feature based on the knowledge shared up front.&lt;/p&gt;
&lt;p&gt;Once that&amp;rsquo;s done, the developer may still run into cases they didn&amp;rsquo;t think about and may message the group again. But often, things are planned out enough that the developer implementing the feature can solve the problem. This completed code is sent back to the group/maintainer for Integration. The &amp;ldquo;Code Review&amp;rdquo; at this stage is simply to make sure that things are happening as expected, to do one last check of the code, and to actually merge the changes in and test things.&lt;/p&gt;
&lt;p&gt;Now, there&amp;rsquo;s plenty of problems with this process - but the Code Review is rarely one of them.&lt;/p&gt;
&lt;h2 id=&#34;the-advent-of-codereviews&#34;&gt;The Advent of Code Reviews&lt;/h2&gt;
&lt;p&gt;I want to place the blame squarely on GitHub for enabling and promoting Code Reviews, via mostly circumstantial evidence.&lt;/p&gt;
&lt;p&gt;Prior to GitHub contributing to an Open Source project required you to get involved in the developer community for the project before submitting code. After GitHub anyone can stumble across a repo and open a Pull Request with code changes - without discussing anything at all.&lt;/p&gt;
&lt;p&gt;That mentality has premeated current development processes everywhere. Now when you start work on a task, instead of having all the information/discussion up front the developer is expected to seek it out. They&amp;rsquo;re expected to not just figure out that they may be missing information, but also figure out the best person to ask to find out what they&amp;rsquo;re missing. The developer is immediately set up for failure unless they already know the codebase well. At any sufficiently large enough project, that is very unlikely to be the case.&lt;/p&gt;
&lt;p&gt;Instead you end up open a code review that sits in review for days while engineers chime in with little fixes, slightly better ways of going about things, while you scramble to implement them and get your code reviewed again and again. Of course, some places recognize this problem and simply outlaw large scale architecture changes at this stage even if they are completely warranted.&lt;/p&gt;
&lt;p&gt;See the problem isn&amp;rsquo;t that the Code Review is bad - it&amp;rsquo;s that the Code Review is the first time anyone has actually looked at the code related to the problem.&lt;/p&gt;
&lt;h2 id=&#34;the-solution-to-code-reviews&#34;&gt;The Solution to Code Reviews&lt;/h2&gt;
&lt;p&gt;There isnt one.&lt;/p&gt;
&lt;p&gt;All planning up front without a deadline isn&amp;rsquo;t helpful. All work without planning is pointless. But where your team draws the line between planning that&amp;rsquo;s &amp;ldquo;good enough&amp;rdquo; and the length of time attributed to feature development changes frequently. It changes based on team composition, it changes based on the company state, it changes based on the market your company operates in. The only thing that&amp;rsquo;s certain is that the amount of planning from feature to feature will be different.&lt;/p&gt;
&lt;p&gt;You have to be able to make a call at some point that the planning is enough. But if your planning doesn&amp;rsquo;t include pseudo code and links to code in the project, chances are it&amp;rsquo;s not enough planning.&lt;/p&gt;
&lt;p&gt;Planning should not be a single person event either. The whole team that would participate in the code review should be participating in the planning process as well.&lt;/p&gt;
&lt;p&gt;Once the planning is done and a developer completes the code change, the Code Review needs to happen. At this point generally it&amp;rsquo;s about testing change rather than re-architecting how the change is made. When we&amp;rsquo;re at this stage, there&amp;rsquo;s even more tools at our disposal!&lt;/p&gt;
&lt;p&gt;Unit tests, Integration Tests, Synthetic/BlackBox Tests - all of these can help ease the time code spends stuck in code reviews. By minimizing the time spent in code reviews, and maximizing the time spent in planning instead we can achieve things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actually find bugs further downstream and upstream&lt;/li&gt;
&lt;li&gt;Propagation of Knowledge throughout the team&lt;/li&gt;
&lt;li&gt;Team Ownership of a feature&lt;/li&gt;
&lt;li&gt;Double check functionality/architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How fun.&lt;/p&gt;
&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This was originally published on Medium - &lt;a href=&#34;https://xangelo.medium.com/code-reviews-are-a-failure-36b72a659de4&#34;&gt;https://xangelo.medium.com/code-reviews-are-a-failure-36b72a659de4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Git Branching Strategies</title>
      <link>https://xangelo.ca/posts/git-branching-strategies/</link>
      <pubDate>Fri, 16 Jul 2021 16:14:40 -1400</pubDate>
      
      <guid>https://xangelo.ca/posts/git-branching-strategies/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;https://xangelo.ca/posts/git-workflows/&#34;&gt;previous&lt;/a&gt; post, I talked about git workflows and I outlined the two big problems I see with git workflows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pull Requests/Reviews&lt;/li&gt;
&lt;li&gt;Branching Strategies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I took the easy route at the time and just talked about Pull Requests/Reviews. But I was requested to throw some thoughts out around branching strategies and how they should work.&lt;/p&gt;
&lt;p&gt;The reason I think branching strategies are such a complicated topic is because it touches more than just git. As an industry we&amp;rsquo;ve mostly settled on the idea of Continuous Integration and Continuous Deployment (CI/CD). These processes tend to tie directly into git and have deep ties to your branching strategies. In addition branching strategies tend to reflect the testing architecture and experience level of the engineering organization itself. It&amp;rsquo;s not the simple strategy that workflows like GitHub Flow like to pretend it is. Whether you like it or not, your git branching strategy is already embedded in your organiztion and reflected in your development process. It&amp;rsquo;s your job to discover what that is and then decide if it&amp;rsquo;s even worth it to change. Sometimes, unfortunately, even though it may not be what you consider ideal, the strategy the team is currently using is MOSTLY one that works for them. At that point it&amp;rsquo;s just a matter of uncovering bottlenecks (oh don&amp;rsquo;t worry, the engineers will tell you what those are) and mitigating them.&lt;/p&gt;
&lt;p&gt;The two main branching strategies people tend to advocate for are &amp;ldquo;Environment Branching&amp;rdquo; and &amp;ldquo;Feature Branching&amp;rdquo; so lets talk about the strategy itself, and then see how it affects your org.&lt;/p&gt;
&lt;h2 id=&#34;environment-branching&#34;&gt;Environment Branching&lt;/h2&gt;
&lt;p&gt;Environment branching models the fact that the software at your org has some kind of &amp;ldquo;release cycle&amp;rdquo; where a series of patches (in the git sense) are first in a &amp;ldquo;development&amp;rdquo; environment where the developers involved can work on the feature without impacting others. We then merge the dev branch into a &amp;ldquo;staging&amp;rdquo;/&amp;ldquo;testing&amp;rdquo;/&amp;ldquo;integration&amp;rdquo; environment where a patch or series of patches are released for other people in the org to test. Often this involves a QA team looking at the changes and validating that there aren&amp;rsquo;t any regression tests. Finally once everyone is happy we merge staging into production and deploy it.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Environment&#34; data-lang=&#34;Environment&#34;&gt;┌┬──────┐    ┌┬───────┐    ┌┬──────┐
││ Dev  │    ││ Stage │    ││ Prod │
└┴──┬───┘    └┴──┬────┘    └┴──┬───┘
    │            │             │
   ┌┼┐           │             │
   └┼┴───────────┤             │
    │            │             │
   ┌┼┐          ┌┼┐            │
   └┼┘          └┼┘            │
    │            │             │
   ┌┼┐           ▼             │
   └┼┴───────────┐             │
    │            │             │
   ┌┼┐          ┌▼┐            │
   └┴┘          └─┴────────────┤
    ▼                          │
                              ┌┼┐
                              └─┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that not every commit to the dev branch results in an equivalent merge to the staging branch. Infact sometimes there&amp;rsquo;ll be plenty of back/forth on the dev branch. Finally a set of features is selected and deployed to staging. Once it&amp;rsquo;s been debugged, it goes off to production. Of course, this is when everything goes smoothly. Most times you&amp;rsquo;ll have hotfixes that you&amp;rsquo;ll need to make to prod to fix additional bugs.&lt;/p&gt;
&lt;p&gt;Different orgs deal with that differently. Sometimes we&amp;rsquo;ll have &amp;ldquo;hotfixes&amp;rdquo;, which bypass the branching model entirely. It allows us to take whatever is it prod, branch from it to fi xa bug and merge it straight back into prod without going through the other branches. That hotfix is then ported back to development.&lt;/p&gt;
&lt;p&gt;This model, of course, has its pros/cons. But if it works for your org then it&amp;rsquo;s right for your org. I&amp;rsquo;ve outlined  some caveats and things to think about if you decide to go with the environment branching model.&lt;/p&gt;
&lt;h3 id=&#34;it-forces-a-release-cadence&#34;&gt;It forces a release cadence&lt;/h3&gt;
&lt;p&gt;When you have a single team working in this model it&amp;rsquo;s very easy. It also maps so cleanly to traditional engineering pipelines that it doesn&amp;rsquo;t require a lot of explanation or documentation. But this requires that each team working has its own &amp;ldquo;dev&amp;rdquo; branch/environment to ensure that they&amp;rsquo;re not impacting others testing. But this is expensive, so there&amp;rsquo;s a tradeoff. Often you&amp;rsquo;ll find &amp;ldquo;shared&amp;rdquo; dev environments, which are really just a very broken integration environment where you can&amp;rsquo;t really trust what&amp;rsquo;s happening, and a less broken integration environment. Just the inclusion of an environment that&amp;rsquo;s considering &amp;ldquo;integration&amp;rdquo; requires scheduled releases.&lt;/p&gt;
&lt;p&gt;You need to ensure that your features aren&amp;rsquo;t impacting other developers and so you need to coordinate between internal teams. This takes time. It means while your changes can be tested in tandem in &amp;ldquo;dev&amp;rdquo;, eventually you&amp;rsquo;ll need to settle on what&amp;rsquo;s going out to production adn only those patches get moved into staging. Those patches get tested on for some time and then move into production. There you have a release cadence. Your cadence might be a day, or it might be two weeks. It doesn&amp;rsquo;t matter - that is your cadence. That is the minimal amount of time, on average, that it takes for a change to make it to production.&lt;/p&gt;
&lt;p&gt;There are always ways to mitigate this problem, but I&amp;rsquo;d argue that it isn&amp;rsquo;t a real problem. Having a release cadence is perfectly fine once you have a product that has paying users. It ensures that releases can happen during low-volume traffic times and doesn&amp;rsquo;t impact as many users. It also ensures that users know when they can expect new features.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have dedicated dev environments for each team with no shared resources to speed up the development time. Keep the &amp;ldquo;staging&amp;rdquo;/&amp;ldquo;integration&amp;rdquo; environment the only place where multiple features/bug-fixes are tested in tandem.&lt;/li&gt;
&lt;li&gt;Declare your cadence officially so that everyone knows when the cutoff for a release is. Stick to this. No last minute sneaking in of changes allowed. This allows internal/external expectations for when new features will be rolled out.&lt;/li&gt;
&lt;li&gt;Understand that there is a difference between deploying a change and releasing it to users.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;its-very-easy-for-the-branches-to-get-out-of-sync&#34;&gt;It&amp;rsquo;s very easy for the branches to get out of sync&lt;/h3&gt;
&lt;p&gt;Since you now have multiple teams working it&amp;rsquo;s easy for features that everyone thinks is ready to make it to integration.. only to discover that they are quite broken. So we need to pull them out so that they&amp;rsquo;re not impacting anything else. But how do you do that? You can&amp;rsquo;t just muck with staging directly since merges from dev-&amp;gt;staging will then break. So you need to actually back the change out in dev, then merge dev-&amp;gt;staging to remove the change. But are you using squash+merge or rebase functionality? That can affect the method of resolution you decide on. Regardless, you can expect dev/staging/prod branches to get out of sync and you&amp;rsquo;ll need to manually intervene to sort that nonsense out.&lt;/p&gt;
&lt;h3 id=&#34;its-easy-for-broken-things-to-get-out&#34;&gt;It&amp;rsquo;s easy for broken things to get out&lt;/h3&gt;
&lt;p&gt;The dev environment will probably be mostly broken - with working state only conveyed via some internal communication among devs. Merging that right into staging will cause unexpected bugs or broken features to make it out. The best way to deal with this is to have each team working on a single feature/code-base and having dedicated development environments for each team. This way you ensure that a team is able to test what they are working on in isolation. Once they&amp;rsquo;re sure it&amp;rsquo;s working they&amp;rsquo;ll be able to merge their fixes into the integration environment. This is suspiciously close to the other model of branching.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m really not a fan of environment branching, but I do concur that when there are processes/releases cadences already in place that are immovable (imagine you have a 3rd party group that needs to do testing on releases before they go out) then this can be a good way to handle dependencies. Personally I think environment branching is easy for SREs/devops teams to think about and they map very cleanly to how software orgs traditionally worked. It provides the lowest barrier to adoption - but it has enough problems that it can seem like the new process doesn&amp;rsquo;t work as well as the old one.&lt;/p&gt;
&lt;p&gt;I would be wary about moving an org TO this model as there&amp;rsquo;s just a lot of things that can go wrong that will result in certain individuals spending time rectifying process problems rather than business ones.&lt;/p&gt;
&lt;h2 id=&#34;feature-branches&#34;&gt;Feature Branches&lt;/h2&gt;
&lt;p&gt;This is the other model of branching that I think attempts to tackle some of the major problems with environment branching (while offering up a few of its own). In feature branches you don&amp;rsquo;t have a single dev branch.. instead every thing you work on gets its own &amp;ldquo;dev&amp;rdquo; branch. It&amp;rsquo;s expected that while you&amp;rsquo;re working on your thing your feature branch is probably in a &amp;ldquo;broken&amp;rdquo; state. You keep adding commits to it and eventually when you&amp;rsquo;re happy you merge it to your integration environment branch. Once it&amp;rsquo;s tested, the integration environment gets deployed to production.&lt;/p&gt;
&lt;p&gt;Feature branches aim to solve the problem of environment branches by integrating the &amp;ldquo;staging&amp;rdquo; and &amp;ldquo;production&amp;rdquo; branches. Devs work on feature branches, and then merge their features into &amp;ldquo;integration&amp;rdquo; environments. When people are happy with that, the features get moved into production environments. There&amp;rsquo;s a lot less moving parts (on the surface) and so this is normally the process that people go with.&lt;/p&gt;
&lt;h2 id=&#34;branching-strategies-affect-everything&#34;&gt;Branching Strategies Affect Everything&lt;/h2&gt;
&lt;p&gt;These branching strategies sound great - but branching strategies aren&amp;rsquo;t an isolated problem that can be solved without affecting anything else. Environment branches require you to have multiple environments for your code. It requires you to have &amp;ldquo;development&amp;rdquo; and &amp;ldquo;staging&amp;rdquo; and &amp;ldquo;production&amp;rdquo; environments. All branching strategies require you to differentiate between &amp;ldquo;code&amp;rdquo; and &amp;ldquo;build artifacts&amp;rdquo; which are actually what you should be deploying.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Workflows Suck</title>
      <link>https://xangelo.ca/posts/git-workflows/</link>
      <pubDate>Thu, 15 Jul 2021 12:16:45 -1600</pubDate>
      
      <guid>https://xangelo.ca/posts/git-workflows/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m tired of all the git workflows. I&amp;rsquo;m tired of talking about the best way to craft commit messages. I&amp;rsquo;m tired of how people pile on the best way to do PRs. I&amp;rsquo;m sick of people picking apart architectural decisions in a PR. I&amp;rsquo;m tired of opening PRs only to have no one look at them for days while I continue to harass people into reviews. I&amp;rsquo;m over the fact that I don&amp;rsquo;t think I&amp;rsquo;ve ever seen a single person clone a PR locally and actually verify that it does what it says it does.&lt;/p&gt;
&lt;p&gt;And I don&amp;rsquo;t think I&amp;rsquo;m alone in these problems. Almost every engineering team I&amp;rsquo;ve ever worked with has their own slightly customized git workflow that &amp;ldquo;works&amp;rdquo; for them. And every one has had the same problems I mentioned above. Honestly I think it&amp;rsquo;s just cause no one uses git properly.&lt;/p&gt;
&lt;p&gt;The problem, of course, is not &amp;ldquo;using git&amp;rdquo;. The problem is from all the interconnected bits around it. Writing a commit message is easy. Writing a commit message on code that no one at your company knows anything about, where you&amp;rsquo;re pretty sure it does what you want, is much harder. In order to even talk about &amp;ldquo;using git properly&amp;rdquo; there&amp;rsquo;s so much background that needs to be talked about.&lt;/p&gt;
&lt;h2 id=&#34;what-is-git&#34;&gt;What is git?&lt;/h2&gt;
&lt;p&gt;Git has this as the first sentence on it&amp;rsquo;s site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Git is a free and open source &lt;em&gt;distributed version control system&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s git. Distributed version control system (DVCS).&lt;/p&gt;
&lt;p&gt;Traditional Version Control Systems (VCS) tended to be centralized. That is you had a &amp;ldquo;server&amp;rdquo; where your code resided. Developers would &amp;ldquo;check out&amp;rdquo; the files that they wanted to work on. Do the work locally, and then re-upload them to this central server. git changed that model. EVERYONE has a copy of the code. You make your changes locally, and you can push to anyone else you&amp;rsquo;d like! You could make a change, and then send that code to a friend directly from git USING git. Push to their repo. They could do the same to you. Instead of having one central server that contains all the code, people work with each other.&lt;/p&gt;
&lt;h2 id=&#34;what-are-forges&#34;&gt;What are Forges?&lt;/h2&gt;
&lt;p&gt;Of course, that works really well when you&amp;rsquo;re a small group that&amp;rsquo;s making changes. When things get larger, it can be a bit more difficult. There are inherent problems with having copies of your code scattered around. Who has the most recent version? Who has the authority to merge changes in? How do you communicate these changes to everyone?&lt;/p&gt;
&lt;p&gt;These problems are what propelled tooling like GitHub, GitLab, and BitBucket into the spotlight (known as a Forge). They became these central repositories for your code that allows you to not have to think about that. They allow you a central location where you push/pull your code. They provided an interface for Pull Requests. The ability to track issues and correlate them with code changes. They provided a service that filled a gap in git tooling. They even started publishing general &amp;ldquo;workflows&amp;rdquo; on how best to use git that are all slight variations on this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clone from remote&lt;/li&gt;
&lt;li&gt;create a new branch from master&lt;/li&gt;
&lt;li&gt;make your changes&lt;/li&gt;
&lt;li&gt;commit your changes&lt;/li&gt;
&lt;li&gt;push your changes in your branch to the remote&lt;/li&gt;
&lt;li&gt;create a PR in the UI&lt;/li&gt;
&lt;li&gt;Ping some reviewers (maybe they&amp;rsquo;re automatically assigned)&lt;/li&gt;
&lt;li&gt;Back/Forth on review/code changes&lt;/li&gt;
&lt;li&gt;Merge the approved branch into master&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the &amp;ldquo;workflow&amp;rdquo; is only a small portion of what your actual workflow will look like at your company. It literally is just &amp;ldquo;how do I interact with git and get this change approved&amp;rdquo;. There are many steps before/after.&lt;/p&gt;
&lt;p&gt;There are variations, as always. &lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;Git Flow&lt;/a&gt; talks about conventions for branch naming/merging processes. &lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;GitHub Flow&lt;/a&gt; and &lt;a href=&#34;https://docs.gitlab.com/ee/topics/gitlab_flow.html&#34;&gt;GitLab Flow&lt;/a&gt; do the same, but with a focus on their tooling instead of general git level instructions.&lt;/p&gt;
&lt;h2 id=&#34;the-big-git-workflow-problem&#34;&gt;The Big Git Workflow Problem&lt;/h2&gt;
&lt;p&gt;The problems people have with git workflows tend to stem from two areas: Pull Requests and Branching Strategies. I&amp;rsquo;m going to avoid chatting about branching strategies here because there is a lot more to consider than just naming conventions. A lot of companies have a lot of additional tooling that is very integrated into the git branching styles used. Things like CI/CD that use environment branches, merging to master auto-deploying to certain environments - all these things force additional constraints on the branching strategies decided upon. Often it&amp;rsquo;s very hard to change these things and you&amp;rsquo;re left in an in-between state indefinitely that is much worse than the original.&lt;/p&gt;
&lt;p&gt;Instead I&amp;rsquo;m going to focus on Pull Requests and the processes around it: Commits, Pull Request Reviews, Merging Strategies.&lt;/p&gt;
&lt;h3 id=&#34;commits&#34;&gt;Commits&lt;/h3&gt;
&lt;p&gt;The smallest unit of the PR is the commit. Now, even at this stage, there&amp;rsquo;s lots of argument on how to proceed but there&amp;rsquo;s at least one &amp;ldquo;agreement&amp;rdquo;: A commit should be one thing.&lt;/p&gt;
&lt;p&gt;Of course, that&amp;rsquo;s much easier said than done. A lot of the time you&amp;rsquo;ll be in your code and then you may see some small bit of logging or metrics that could be improved. It&amp;rsquo;s only a one line change? May as well make it now to improve things for everything. Sometimes the changes you&amp;rsquo;re making end up really being two indepedent changes that COULD work separately, but only together do they make a whole feature.. is that one commit or two?&lt;/p&gt;
&lt;p&gt;Once you figure out what&amp;rsquo;s going to be IN your commit, then you get to figure out what message you to leave your future self.&lt;/p&gt;
&lt;p&gt;I used to think that &lt;a href=&#34;https://chris.beams.io/posts/git-commit/&#34;&gt;https://chris.beams.io/posts/git-commit/&lt;/a&gt; was a great example on how to write commit messages. I&amp;rsquo;ve since changed my mind a bit to be less prescriptive about process and more descriptive about outcome.&lt;/p&gt;
&lt;p&gt;The goal for a final commit message is that when you look at this message in a year, what&amp;rsquo;s the best way for you to recontruct the context that you had when you came up with your solution. In order to do this you need to have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A good summary sentence, as short as possible and no shorter (the hardest part, I always write this last)&lt;/li&gt;
&lt;li&gt;A good explanation of what your single change is. Go as in-depth as you want, but if you find yourself writing multiple paragraphs, put that in a separate document and then add it to the references section.&lt;/li&gt;
&lt;li&gt;A References section with links to ticket/issue/tasks related, any documentation you used to come up with your solution (possibly links to other repos if you used a particular pattern that you found elsewhere)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As long as you have those 3 things, you&amp;rsquo;re free to do whatever you&amp;rsquo;d like.&lt;/p&gt;
&lt;p&gt;But note that this is for your FINAL commit. That&amp;rsquo;s very different from the active commits that are happening that people use as &amp;ldquo;save points&amp;rdquo; on their work. Commits with messages like &amp;ldquo;fix typo&amp;rdquo;, &amp;ldquo;does this work?&amp;rdquo;, &amp;ldquo;how about now?&amp;rdquo; are normally used by devs while they&amp;rsquo;re working on things. These are what I call &amp;ldquo;active&amp;rdquo; commits. That is, you&amp;rsquo;re actively working on something and using git as a bit of a save point for you to go back if you want, or not. Maybe you&amp;rsquo;re wroking on something and just need to get someone else to take a look so you make a random commit, push it to your forge, and send someone a link to review unofficially. These are important steps in the development process.&lt;/p&gt;
&lt;p&gt;These types of active commits are fine, but once you&amp;rsquo;re DONE and you&amp;rsquo;re happy with what you did, it&amp;rsquo;s time to REBASE your branch. Rebasing seems like a bit of an ambiguous word, but what we are going to be doing is taking a look at the git commit history you&amp;rsquo;ve created, and then squashing them all up into a single commit or maybe a couple if you tried to do multiple things. I don&amp;rsquo;t want to go into all the details about this, because there are plenty of instructions for how to accomplish what you want &lt;a href=&#34;https://git-rebase.io/&#34;&gt;this website being one of the better ones&lt;/a&gt; I&amp;rsquo;ve run into.&lt;/p&gt;
&lt;p&gt;Rebase allows you to see all the commits between two different commits, and allows you to decide what to do with them. So if you made 10 commits that were &amp;ldquo;fix this typo&amp;rdquo; and one that had the actual implementation, you could choose to squash all those commits in a single one just by telling git &amp;ldquo;squash this commit&amp;rdquo; and choose to &amp;ldquo;pick&amp;rdquo; the commit that you want to remain as a commit. Git even gives you a nice little interactive interface that allows you to do this (it is a text based so don&amp;rsquo;t get too excited).&lt;/p&gt;
&lt;p&gt;Rebasing is important because it allows us to move from an &amp;ldquo;active commit&amp;rdquo; state to a &amp;ldquo;code complete&amp;rdquo; state. We are officially declaring that we are done with this bit of work and we don&amp;rsquo;t intend to do anything more with it as it relates to the task that we&amp;rsquo;re working on. When we rebase we get a chance to edit your final commit message, which should ideally follow the rules above.&lt;/p&gt;
&lt;h3 id=&#34;pull-requests&#34;&gt;Pull Requests&lt;/h3&gt;
&lt;p&gt;Pull requests is where I have most of my problems. PRs are a way for devs to share the changes they&amp;rsquo;ve made with other devs, and gather/address feedback. Things you may have missed in your changes, other repos to look at for similar things. In large orgs it&amp;rsquo;s not unlikely that someone might point out to you a repo you&amp;rsquo;ve never heard of that does something similar that you can take inspiration from. These are valuable interactions to have - but they happen at the wrong time.&lt;/p&gt;
&lt;p&gt;Pull Requests are always at the end of development process on a task. Once you&amp;rsquo;ve finished your changes, you submit them for review. I think this is just too late, and I&amp;rsquo;ll explain why with some&amp;hellip; history!&lt;/p&gt;
&lt;p&gt;As I said before, git was designed to be distributed because the developers were distributed geographically. This was in &amp;ldquo;ye olde times&amp;rdquo;, where slack didn&amp;rsquo;t exist and IRC was king. In order to communicate effectively, and keep the conversations public for the commnity, these developers utilized the lost art of.. mailing lists! These lists were available for anyone with an email to join and follow along in the conversation. One of the things that this really fostered was bringing up conversations around code first.&lt;/p&gt;
&lt;p&gt;Before anyone actually DID the work there was plenty of back and forth in the mailing list about the change that was going to happen. Not just theoritcal &amp;ldquo;we could do this&amp;rdquo;, but code samples would be sent around, links to relevant code bits would be included so everyone had the same context. The evolution of the change was publicly documented and the subject matter experts were able to weigh in on the how they&amp;rsquo;d approach the change. This would go back and forth until there was a VERY clear understanding of what the change would look like. Then someone would take that and get it over the line. They&amp;rsquo;d then send the patches they made back to the mailing list for people to look at. This almost ALWAYS involved taking the patches, applying them locally and doing doing some testing to validate that it was working. At this point, the goal is that changes at this point are not major architectural ones, but smaller ones to tackle edge cases that people might have uncovered during testing.&lt;/p&gt;
&lt;p&gt;This is the process that PRs are attempting to replicate -&amp;gt; except because of how most companies operate the details of the change only happen when you start working on it, and the architectural decisions are often only reviewed once they&amp;rsquo;ve been made.&lt;/p&gt;
&lt;p&gt;I think &amp;ldquo;Pull Requests&amp;rdquo; should really be put into multiple categories. There&amp;rsquo;s an initial invesitgation/proposal process where people communicate and collaborate over how to approach the solution to a problem. This should definitely be time-boxed as it&amp;rsquo;s too easy for this to stretch into infinity. The goal is to do those investigations and allow SMEs to contribute to the conversation early. The goal for this document is to have a very clear understanding of the change needed to be made. Schema changes, repos that might need to be adjusted AND WHERE. If there are no links to code within this then you&amp;rsquo;re probably not done. Someone should be able to grab it and move ahead without necessarily being part of the conversation to craft the solution.&lt;/p&gt;
&lt;p&gt;Then there&amp;rsquo;s the Review process. After the code is complete sharing it with others and having them RETRIEVE YOUR CHANGES AND TEST THEM LOCALLY. Testing locally is important for many reasons - often the main one is that your test suite isn&amp;rsquo;t robust enough, or it isn&amp;rsquo;t trustworthy (then delete them, but that&amp;rsquo;s another story). But also it highlights pain points in your development process that you may not deal with always. Missing documentation for how to run something, or how to set up some data for a test. Not being able to run your tests locally because they take too long. Having people really test your code is a great final step to getting your code reviewed.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a lot of text - but thinking about development workflows/optimizations and really understanding where the problems/bottle-necks are is something I&amp;rsquo;m really passionate about. This was also a very high-level introduction to these ideas. There will be a follup post on commits and rebasing itself that will hopefully make things a bit easier for people to understand. If you have any questions, don&amp;rsquo;t hesitate to reach out to me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gemini, an HTTP alternative</title>
      <link>https://xangelo.ca/posts/gemini-intro/</link>
      <pubDate>Mon, 21 Jun 2021 17:11:57 -1100</pubDate>
      
      <guid>https://xangelo.ca/posts/gemini-intro/</guid>
      <description>&lt;p&gt;For the last few months now I&amp;rsquo;ve started embracing my weird love for text and text-related user interfaces. From email to irc, I&amp;rsquo;m moving more and more of my social interactions away from traditional websites/apps and over to my terminal. A big part of this move is a step back from 3rd party applications to things that I have a bit more control over - but there are many reasons.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Privacy: Text only platforms make it very hard for trackers. Most email nowdays include &amp;ldquo;tracking pixels&amp;rdquo; that allow the sender to know when you opened the email and to gather information about the device what opened the email itself.&lt;/li&gt;
&lt;li&gt;No ads: When everything is text, there&amp;rsquo;s 0 need to include the ability to deal with images. As such advertisements just can&amp;rsquo;t happen in a traditional format. The closest you can get is what you think of when you look at global chat in MMOs - people just spamming whatever they want. As a result it makes it easier to deal with (blocking).&lt;/li&gt;
&lt;li&gt;Faster: As we&amp;rsquo;ve added more and more compute power to devices, the tools and applications that we use have just gotten larger and less efficient. It&amp;rsquo;s very common for websites loaded to be 1mb in size - that&amp;rsquo;s kinda terrible. By moving to a text-only interface, you lose the ability to include a bunch of extra things and you end up with what matters - Just The Content.&lt;/li&gt;
&lt;li&gt;Interoperability: When everything is text, it&amp;rsquo;s much easier to wire up multiple tools together. Think of the unix interface philosophy. Every tool does one thing well, and the input/output is text. So you have the ability to wire up a chain of tools that the original authors don&amp;rsquo;t need to know/care about.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The hard part is that you need to find alternatives to a lot of traditional apps that you have come to rely on. For some things (email for example) it&amp;rsquo;s very easy. For others, like web browsers, it&amp;rsquo;s basically impossible. There are things like &lt;a href=&#34;https://lynx.invisible-island.net/&#34;&gt;lynx&lt;/a&gt; that you can utilize, but it&amp;rsquo;s just not the same. So many websites now days are designed around the fact that the user is going to have a full GUI browser. And, honestly, that&amp;rsquo;s a very reasonable expectation.&lt;/p&gt;
&lt;p&gt;But I still found myself looking for an alternative. And I found Gemini.&lt;/p&gt;
&lt;h2 id=&#34;what-is-gemini&#34;&gt;What is Gemini&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gemini.circumlunar.space&#34;&gt;Gemini&lt;/a&gt; is an alternative to the HTTP protocol. It&amp;rsquo;s definitely not going to replace HTTP, nor does it want to. Instead it aims to operate alongside. It&amp;rsquo;s a very stripped down subset of markdown to enable easy implementations of parsing. A lot of the complexity of modern browser systems is around parsing HTML/CSS effectively and gemini just does away with that whole idea.&lt;/p&gt;
&lt;p&gt;This means that documents in Gemini are very light-weight, and are readable without any parsing. You could just read the raw text that makes up a gemini doc (called gemtext) and be just fine. Any styling choices are entirely up to the renderer (browser mostly) and are irrelevant to the document itself. There is no way to view images in-line, there is no JS, there is nothing but text.&lt;/p&gt;
&lt;p&gt;I really recommend you check out the gemini home page and do a bit of reading up on it.&lt;/p&gt;
&lt;h2 id=&#34;accessing-gemini&#34;&gt;Accessing Gemini&lt;/h2&gt;
&lt;p&gt;Since gemini is a completely different protocol you can&amp;rsquo;t access it with a regular web-browser that deals in HTTP. Instead you have to find an alternative browser that deals with the gemini:// protocol. There are &lt;a href=&#34;https://gemini.circumlunar.space/software/&#34;&gt;numerous&lt;/a&gt; owing to the simplicitly of the parser implementation. The one I&amp;rsquo;ve been using most is a terminal based one called &lt;a href=&#34;https://github.com/makeworld-the-better-one/amfora&#34;&gt;amfora&lt;/a&gt;, but if you&amp;rsquo;re looking for something graphical I highly recommend &lt;a href=&#34;https://gmi.skyjake.fi/lagrange/&#34;&gt;Lagrange&lt;/a&gt; which is wonderful.&lt;/p&gt;
&lt;p&gt;Obviously this is just a browser, so you need to go somewhere. I recommend starting at &lt;a href=&#34;gemini://geminispace.info&#34;&gt;geminispace.info&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing I should caution you - don&amp;rsquo;t expect a full replacement for what you consider &amp;ldquo;the internet&amp;rdquo;. Gemini is very simplistic and focuses on ease of content consumption. It doesn&amp;rsquo;t make content creation hard, but because of the focus on content itself, &amp;ldquo;interactions&amp;rdquo; are minimal. Some capsules (the gemini equivalent of a website) have &amp;ldquo;comment&amp;rdquo; sections, which harken back to the guestbooks of the 90s.&lt;/p&gt;
&lt;h2 id=&#34;why-im-interested-in-gemini&#34;&gt;Why I&amp;rsquo;m interested in Gemini&lt;/h2&gt;
&lt;p&gt;The thing that attracts me to Gemini is the same thing that attracts me to most projects: putting data privacy/ownership above all else.&lt;/p&gt;
&lt;p&gt;Getting technical, Gemini foces TLS connections. Nothing is transmitted un-encrypted. It also brings to the forefront client certificates in SSL. The original spec for certs already supports this and it&amp;rsquo;s crazy that it never took off. It honestly resolves the whole account identification/password problem in a really neat way.&lt;/p&gt;
&lt;h3 id=&#34;a-sidenote-on-ssl-and-authentication&#34;&gt;A sidenote on SSL and Authentication&lt;/h3&gt;
&lt;p&gt;This is, I think, one of my favourite features of gemini. SSL certs have two sides, and most people are only familiar with one. Servers generate certs to identify themselves. But since anyone can just generate a cert, there is really no way of knowing that the server you are connecting to is who they say they are. That is, I can generate a cert for duckduckgo.com, and you would have no way of knowing I&amp;rsquo;m NOT the actual owner of that site. One way that we currently resolve this problem is &amp;ldquo;Certificate Authorities&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Certificate Authorities (CA) are just a collection of companies that at SOME POINT were declared trustworthy. You had no say in that process, and despite numerous hacks of the CAs, they&amp;rsquo;re still considered &amp;ldquo;trustworthy&amp;rdquo;. You pay these companies to certify that you are who you say you are. There are various levels of &amp;ldquo;validation&amp;rdquo; that you can do, but the end goal is that your browser trusts a bunch of these CAs. When they see a cert from your website signed by a CA, they trust it.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t get me wrong, trust in certs is a hard problem to solve and one that has been around for a long time.&lt;/p&gt;
&lt;p&gt;Gemini utilizies the idea of &amp;ldquo;Trust on First Use (TOFU)&amp;rdquo;. The idea is similar to how ssh manages your known hosts. The first time you visit a site in gemini that provides you a key, you just believe that they are who they say they are and record the key/site pair. Next time you visit, they simply match the cert recieved with what they have stored.&lt;/p&gt;
&lt;p&gt;This is naive. The rational is, once you connect to a site you&amp;rsquo;ll won&amp;rsquo;t be able to connect to anyone else impersonating that site unless you forget the original key/site mapping. Of course, the reverse is also true -&amp;gt; if you connect to a site that is already impersonating a different one, you&amp;rsquo;ll need to forget the original mapping before you can navigate to the actual site.&lt;/p&gt;
&lt;p&gt;On the server side, it definitely feels a bit weird. But this works wonderfully for the client!&lt;/p&gt;
&lt;p&gt;As a user, you can generate a single certificate that&amp;rsquo;s YOU. You can then provide the public key for that cert to the server to identify it as you. If the server implements TOFU (which is how every authentication system ever works) then you are mapped to that cert on that server. Going to another server? Provide the same signature. Nothing to remember. You just need to keep your private key safe.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;certification generation&amp;rdquo; part is the tricky part and is why this never caught on for authentication on the web. But in Gemini, which is currentyly a more technical audience, it&amp;rsquo;s a bit more feasible as a solution. What it means is, as a user, I can generate a single &amp;ldquo;account&amp;rdquo; and reuse it everywhere.&lt;/p&gt;
&lt;h2 id=&#34;updating-hugo-to-output-gemini-valid-content&#34;&gt;Updating Hugo to output Gemini valid content&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m interested enough in Gemini to put some time into modifying my website to output docs in gemtext so that I can serve my site over gemini as well as http. There are a few steps here (including getting off github pages so that both domains can be served over the xangelo.ca root) but that&amp;rsquo;s ok.&lt;/p&gt;
&lt;p&gt;The first thing I had to do was figure out how to get my content into gemtext. The easiest way was just to utilize hugo and add a new gemini output. There are a couple resources on this, but the two that were the most helpful were &lt;a href=&#34;https://sylvaindurand.org/gemini-and-hugo/&#34;&gt;this article by Sylvain Durand&lt;/a&gt; and &lt;a href=&#34;https://brainbaking.com/post/2021/04/using-hugo-to-launch-a-gemini-capsule/&#34;&gt;this one by Wouter Groenveld&lt;/a&gt;. I won&amp;rsquo;t re-hash what these are but the final configurations for my site can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AngeloR/xangelo.ca/blob/88c61cd88bd2228dc7f2e46871f5e5ea6e2fcfdc/config.toml#L36&#34;&gt;config.toml&lt;/a&gt;: The config file to declare the gemini output&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AngeloR/xangelo.ca/blob/88c61cd88bd2228dc7f2e46871f5e5ea6e2fcfdc/layouts/index.gmi&#34;&gt;index.gmi&lt;/a&gt; - The layout file for the main page&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AngeloR/xangelo.ca/blob/88c61cd88bd2228dc7f2e46871f5e5ea6e2fcfdc/layouts/_default/single.gmi&#34;&gt;single.gmi&lt;/a&gt; - The layout file for a single post&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m including them because I mostly cannibalized Wouter/Sylvain&amp;rsquo;s docs. Wouter made the decision to get off Gemini due to the earlyness of the protocol (it is very early) and as such dropped the original config links that he had up. I just went through git history and found them and made a few tweaks and put them up in my repo.&lt;/p&gt;
&lt;p&gt;At the moment I&amp;rsquo;m mostly doing what Wouter is - a &amp;ldquo;build&amp;rdquo; on my site involves me generating some hugo and usign scp to move it over to my gemini server. I&amp;rsquo;m then running &lt;a href=&#34;https://github.com/mbrubeck/agate&#34;&gt;agate&lt;/a&gt; a bit manually while testing. This command just starts agate, tells it where my content folder is located, the addresses to bind to, and the hostname and language.&lt;/p&gt;
&lt;p&gt;Agate will happily generate the keys for you on first run, or you can provide them yourself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ./agate.x86_64-unknown-linux-gnu --content ./gemini/ --addr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;::&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:1965 --addr 0.0.0.0:1965 --hostname gemini.xangelo.ca --lang en-US
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;For now, scp is fine - but I&amp;rsquo;ll probably just set up a gemini submodule/repo and deploy that to my server instead. That way I don&amp;rsquo;t have to worry too much about transferring the entirety of the site.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, I&amp;rsquo;m pretty excited about Gemini. The ease of getting into the ecosystem as a consumer and publisher is amazing. There are some awesome projects to really ease that gap. But there&amp;rsquo;s also plenty of room for growth and a small enough community that you can get involved in. The best place to get into it is &lt;a href=&#34;gemini://gemini.circumlunar.space&#34;&gt;gemini space&lt;/a&gt;. I think the thing that excites me most about it is just the fact that there&amp;rsquo;s such a big focus on privacy and small contributors. I think that&amp;rsquo;s something that&amp;rsquo;s missing from the web today, that we used to have at some point.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dungeon Generation in Roguelikes</title>
      <link>https://xangelo.ca/posts/devlog/roguelike/dungeon-generation/</link>
      <pubDate>Fri, 23 Apr 2021 09:44:35 -4400</pubDate>
      
      <guid>https://xangelo.ca/posts/devlog/roguelike/dungeon-generation/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;As always, I&amp;rsquo;ve been working on a terrible browser-based game. This time, it
will be revolving around gameplay mechanics from roguelikes(or roguelites
technically)+jrpgs.&lt;/p&gt;
&lt;p&gt;The thing I specifically want to look at today is the topic of Dungeon
Generation - both in and out of code.&lt;/p&gt;
&lt;p&gt;Roguelikes all tend to share one mechanic: Procedurally Generated Dungeons. The
idea is that every play-through is different, every floor of a dungeon is
completely unique. As a result, it requires the player to learn the mechanics of
the game over multiple runs as most roguelikes also include perma-death as a
required feature.&lt;/p&gt;
&lt;p&gt;Dungeon Generation in roguelikes are a very interesting topic for two reasons.
There is a definite technical component to being able to generate &amp;ldquo;good&amp;rdquo;
dungeons quickly. Dungeons that are large enough, with enough rooms/pathways to
be interesting, but that don&amp;rsquo;t take forever to generate. The goal is each floor
is generated randomly when the player enters - we don&amp;rsquo;t want load times
equivalent to stepping into a room in Morrowind. The second reason is one that I
think roguelikes can miss out on - dungeon generation must fit the environment.&lt;/p&gt;
&lt;p&gt;Most roguelikes have a generation alorithm that gets assigned to every single
floor. But that&amp;rsquo;s not really that helpful. Dungeons should reflect the
environment the player is in. Having square rooms in a castle dungeon makes
sense. Having square rooms in a cave, not so much.&lt;/p&gt;
&lt;p&gt;A lot of dungeon generation information you find online tend to focus on the
techtechnical component: HOW do you generate a dungeon. I&amp;rsquo;m hoping to also cover
the second bit here.&lt;/p&gt;
&lt;h2 id=&#34;random&#34;&gt;Random&lt;/h2&gt;
&lt;p&gt;The easiest to explain algorithm is the &amp;ldquo;Random&amp;rdquo; one, but it&amp;rsquo;s probably the
hardest to get right. Random dungeons are exactly what you&amp;rsquo;d think -&amp;gt; just
randomly place obstacles and interaction points around the dungeon. As a result
it&amp;rsquo;s very easy to actually MAKE the dungeon.&lt;/p&gt;
&lt;p&gt;It also has the added benefit that the &amp;ldquo;random&amp;rdquo; look works really well for open
fields. Think areas that are strewn with trees or rocks or something like that.
It could also work really well for large underground caverns since you would be
peppering the inside with obstances.&lt;/p&gt;
&lt;p&gt;But we&amp;rsquo;re not just making a dungeon - we&amp;rsquo;re making a game. And truly-random
dungeons are hard to tune. How do you ensure that every chest you place is
actually reachable by the player? How about the one set of stairs? How do you
ensure that the player doesn&amp;rsquo;t spawn in a box, closed off from the rest of the
dungeon. How do you ensure that they don&amp;rsquo;t spawn right next to some stairs?&lt;/p&gt;
&lt;p&gt;Each of these questions (and many many more) result in you tuning you random
generation more and more. You&amp;rsquo;ll never get it 100% right. There&amp;rsquo;ll always be
edge cases reported by your places that you didn&amp;rsquo;t even think about (did a
monster spawn in deep water so the player didn&amp;rsquo;t even know it was there and is
now reporting that they didn&amp;rsquo;t get an achievement for killing all the monsters
on a foor?).&lt;/p&gt;
&lt;p&gt;I started with a purly random dungeon generation system myeself. It&amp;rsquo;s definitely
not a bad call to make - but you just have to be aware of the edge cases. But I
kept having to tune/adjust things and I&amp;rsquo;d still end up with play testers saying
they got spawned in a box, or couldn&amp;rsquo;t reach the stairs. That&amp;rsquo;s frustrating
enough to probably just stop playing.&lt;/p&gt;
&lt;p&gt;The nice thing about random, however, is that you don&amp;rsquo;t NEED to generate the map
in its entirety. Nor do you need it to be entirely random.&lt;/p&gt;
&lt;h3 id=&#34;on-demand-generation&#34;&gt;On-demand generation&lt;/h3&gt;
&lt;p&gt;So you have the container for your map.. and your character is spawned in a
particular point &lt;code&gt;(x,y)&lt;/code&gt;. Given a field of view (&lt;code&gt;v&lt;/code&gt;) really you only need to
generate a box defined by the points &lt;code&gt;(x-v, y-v)&lt;/code&gt;, &lt;code&gt;(x+v, y-v)&lt;/code&gt;, &lt;code&gt;(x-v, y+v)&lt;/code&gt;,
and &lt;code&gt;(x+v, y+v)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the player steps in a direction, you only need to expand the generated
portion of the map by 1 tile (or whatever your fov is). In this way, your entire
dungeon is being generated as the player discovers it. You get a few benefits
like not needing to store the entirety of the map if the player doesn&amp;rsquo;t visit
it. You can tune drop rates for everything just by how much of the map is
discovered vs. isn&amp;rsquo;t. You can also almost guarantee that EVERY point on the map is
reachable by the player and that they&amp;rsquo;ll discover the stairs exactly when you&amp;rsquo;d
like them to.&lt;/p&gt;
&lt;h3 id=&#34;pseudo-random-fabrication&#34;&gt;Pseudo-random Fabrication&lt;/h3&gt;
&lt;p&gt;Now, lets get the pedantics out of the way - nothing we&amp;rsquo;re doing is random, it&amp;rsquo;s
all pseudo-random. The difference is that in this generation mechanic we&amp;rsquo;re
actually building the map from pre-defined map parts.&lt;/p&gt;
&lt;p&gt;The downside, of course, is that you have to spend a bunch of time generating
the pieces of map and you do have to have to have some guidelines. But, being
able to tune each individual section of map gives you a ton of control over the
actual gameplay. It also allows you to use non-standard map shapes (get outta
here square rooms) and generate really unique looking maps.&lt;/p&gt;
&lt;p&gt;You would need to rotate the location of interactables, but with enough of these
map pieces being put together in random orders it gives you a lot of variation
for your players. And if the unlikely event that they end up getting the EXACT
same map somehow (you know, cause random), the locations of all the interactable
items will be randomized.&lt;/p&gt;
&lt;h2 id=&#34;standard-dungeons-connected-squares&#34;&gt;Standard Dungeons (Connected Squares)&lt;/h2&gt;
&lt;p&gt;There are a million of these tutorials as this is the standard look for
dungeons. I think they work wonderfully when you&amp;rsquo;re actually exploring a dungeon
in a castle or something - but otherwise they seem out of place&lt;/p&gt;
&lt;p&gt;The premise is pretty simplem but it involves iterating over the map numerous
times to achieve the look you want. The steps themselves are pretty
straight-foward.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First go over the map and generate rooms (squares or rectangles, whatever you
want).&lt;/li&gt;
&lt;li&gt;Then go over the map again and connect the rooms together via pathways.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Normally you&amp;rsquo;ll make multiple passes over the map to generate the appropriate
room density that you want. The more rooms, the easier it is to connect them
all.&lt;/p&gt;
&lt;p&gt;The connection part CAN be confusing, but the easiest way is to actually look at
various path-finding algorithms. Since the map doesn&amp;rsquo;t actually exist, any
pathfinding algorithms will find the straightest line possible between your
rooms.&lt;/p&gt;
&lt;p&gt;Simply iterate over each pair of rooms and connect them using your chosen
path-finding algorithm. &lt;a href=&#34;https://csis.pace.edu/~benjamin/teaching/cs627/webfiles/Astar.pdf&#34;&gt;A*&lt;/a&gt;
is always a good choice to understand the real basics of the algorithm so that
you can implement it yourself. Or at least so you understand what&amp;rsquo;s happening
before using whatever package in your programming language of choice.&lt;/p&gt;
&lt;p&gt;The pro&amp;rsquo;s of this technique is that it&amp;rsquo;s a very well documented approach. You
can adjust the density of the map very easily.&lt;/p&gt;
&lt;p&gt;So easily, in fact, that you can ramp up the density to the point that all of
the rooms overlap. The iterate to remove random sections of obstacles (walls)
that are inside the room. That will allow you to generate LARGE rooms where
everything is accessible.&lt;/p&gt;
&lt;h2 id=&#34;drunk-walking&#34;&gt;Drunk Walking&lt;/h2&gt;
&lt;p&gt;The Drunkards Walk is a very simple algorithm and one that I stumbled upon
without really knowing about it. The idea is simple and is based on these requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You want to generate organic looking maps&lt;/li&gt;
&lt;li&gt;You want to ensure that all sections of the map are reachable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The organic maps requirement is probably the most interesting one to me. The
ability to random generate maps that don&amp;rsquo;t look like a bunch of pre-defined
shapes. You could, technically, achieve that same look a myriad of ways, but
this seems the easiest.&lt;/p&gt;
&lt;p&gt;The method is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &amp;ldquo;walker&amp;rdquo; on your map of some size (maybe 4 tiles? maybe 9? whatever
you feel like)&lt;/li&gt;
&lt;li&gt;Start them on one side of the map, with their edges being walls, and their
interiors being walkable floors.&lt;/li&gt;
&lt;li&gt;Make them march to the opposite side, adding some jitter along the other
axis.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The size of the &amp;ldquo;walker&amp;rdquo; dictates the minimum width of the space you&amp;rsquo;re
generating. If you want something to feel more open, make it larger. But if
you&amp;rsquo;re making caves or something, just make them smaller.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;drunken walk&amp;rdquo; step sounds confusing, but it&amp;rsquo;s pretty straight-forward. If,
for example, we start the walker on the west side of the map, they will be
walking to the east. Every step they take to the east should be coupled with
them randomly shifting north/south by a MAX of the size of the walker.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re done, you have a single corridor. To build a map, add more walkers
all moving along the same plane (west-&amp;gt;east for example), and then add one or
two walkers moving from the perpendiclar plane (north-&amp;gt;south in this case). This
ensures that all corridors will be connected, and gives you really neat looking
maps. To me, they work wonderfully for caves/pathways.&lt;/p&gt;
&lt;p&gt;But, by playing with the size of the walker you can change the entire look of
the map. Really wide players give you huge open spaces!&lt;/p&gt;
&lt;p&gt;the only thing this DOESN&amp;rsquo;T do, is actual square looking rooms like if you were
in a real dungeon..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DEVLOG: NewsRiver Updates</title>
      <link>https://xangelo.ca/posts/devlog/newsriver/intro/</link>
      <pubDate>Tue, 10 Nov 2020 09:43:04 -4300</pubDate>
      
      <guid>https://xangelo.ca/posts/devlog/newsriver/intro/</guid>
      <description>&lt;h2 id=&#34;what-is-news-river&#34;&gt;What is News River?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://newsriver.xangelo.ca&#34;&gt;News River&lt;/a&gt; is an auto-updating stream of news that doesn&amp;rsquo;t need to clutter up your RSS feeds. It was based off ideas from &lt;a href=&#34;https://scripting.com&#34;&gt;Dave Winer&lt;/a&gt;. There are some sites that you don&amp;rsquo;t necessarily CARE about reading every single update. Sometimes you just want to see the most recent stuff and move on. Sites like &lt;a href=&#34;https://news.ycombinator.com&#34;&gt;HackerNews&lt;/a&gt; and some subreddits (&lt;a href=&#34;https://reddit.com/r/devops&#34;&gt;/r/devops&lt;/a&gt; or &lt;a href=&#34;https://reddit.com/r/aws&#34;&gt;/r/aws&lt;/a&gt;) are things that I&amp;rsquo;m curious about more recent things that get up there, but I don&amp;rsquo;t necessarily want to read every single item. Normally I&amp;rsquo;m just skimming for interesting titles.&lt;/p&gt;
&lt;p&gt;I used to have these things synced up to my RSS reader, but the sheer number of updates to them caused me to go insane. There&amp;rsquo;s no reasonable way to keep up with all of that stuff. So I had to pull them and then just.. remember to go there. Eventually I got tired of that and wrote the first News River system. You provide a list of sources (RSS or RedditJSON) and it will periodically scan them, download the items, save them, and serve them up for you to see in a simple little auto-updating front-end.&lt;/p&gt;
&lt;p&gt;It was a pretty handy tool that was written in Node.js and relied on Redis as the backend storage, with everything hosted on Heroku. It was written at a time when I was really digging into various Redis use cases and the free-form nature was a useful thing when trying to figure out the project. However, due to the nature of Redis I had to jump through quite a few loops to &amp;ldquo;optimize&amp;rdquo; queries. It had a strange bucketing system for the keys that allowed me to query all updates in the last 10 minutes by grouping all updates into sets where the key was in 5 minute intervals. It was a crazy system and honestly most of the code was handling the bucketing+tests for it.&lt;/p&gt;
&lt;h2 id=&#34;sqlite3&#34;&gt;Sqlite3&lt;/h2&gt;
&lt;p&gt;The latest version of NewsRiver actually rips out Redis and replaces it with Sqlite3. The crazy bucketing system no longer exists since I can just sort by rounded date values. By utilizing sqlite3 instead of Redis I was able to move the entire system over to a small VPS that I ran and eliminate the heroku requirement for running it. The move to sqlite3 was really pushed by the need to simplify the code base.&lt;/p&gt;
&lt;p&gt;NewsRiver is not a project I want to keep tinkering with. I&amp;rsquo;d like it to be complete and to be able to use it daily without making a bunch of tweaks. But the date code had become unwieldy and as a result I spent most of time reviewing it to make sure I wasn&amp;rsquo;t breaking it when fixing things. Moving to sqlite3 allowed me to drop that whole system, delete a ton of code, and just move to something that didn&amp;rsquo;t really require a lot of explanation/documentation.&lt;/p&gt;
&lt;p&gt;Eventually we can replace the sqlite3 only setup by utilizing something like &lt;code&gt;knex&lt;/code&gt; to allow for a swappable data storage layer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DEVLOG: Custom Theme for Hugo</title>
      <link>https://xangelo.ca/posts/devlog/blog/1/</link>
      <pubDate>Wed, 10 Jun 2020 12:00:00 -0000</pubDate>
      
      <guid>https://xangelo.ca/posts/devlog/blog/1/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve started working on a custom theme for Hugo&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; that I use on my blog. The goal here is to be as simple as possible and takes its inspiration from the IETF .txt file&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; where possible.&lt;/p&gt;
&lt;p&gt;The theme itself contains a light/dark mode as well as a small variation of the main theme for mobile. I actually had some help from a good friend&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; who helped me adjust the colors for both dark and light modes to make them a bit more legible.&lt;/p&gt;
&lt;p&gt;The two complicated components and 1 simple component are outlined below.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;h3 id=&#34;numbered-headers&#34;&gt;Numbered Headers&lt;/h3&gt;
&lt;p&gt;I wanted to ensure that each heading would have a number associated with it that matched the number that it was automatically assigned by Hugo during the Table of Contents generation. I didn&amp;rsquo;t want to have to update numbers as I added/remove header tags and I didn&amp;rsquo;t want to utilize any JavaScript on the site, so I was left with CSS only.&lt;/p&gt;
&lt;p&gt;I ended up utilizing counters&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; to achieve this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;counter-reset&lt;/span&gt;: h2;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;counter-reset&lt;/span&gt;: h3;} 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h3&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;counter-reset&lt;/span&gt;: h4;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h4&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;counter-reset&lt;/span&gt;: h5;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h5&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;counter-reset&lt;/span&gt;: h6;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;counter-increment&lt;/span&gt;: h2; &lt;span style=&#34;color:#66d9ef&#34;&gt;content&lt;/span&gt;: counter(h2) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;. &amp;#34;&lt;/span&gt;;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h3&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;counter-increment&lt;/span&gt;: h3; &lt;span style=&#34;color:#66d9ef&#34;&gt;content&lt;/span&gt;: counter(h2) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;counter(h3) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;. &amp;#34;&lt;/span&gt;;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h4&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;counter-increment&lt;/span&gt;: h4; &lt;span style=&#34;color:#66d9ef&#34;&gt;content&lt;/span&gt;: counter(h2) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;counter(h3) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;counter(h4) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;. &amp;#34;&lt;/span&gt;;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h5&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;counter-increment&lt;/span&gt;: h5; &lt;span style=&#34;color:#66d9ef&#34;&gt;content&lt;/span&gt;: counter(h2) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;counter(h3) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;counter(h4) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;counter(h5) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;. &amp;#34;&lt;/span&gt;;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h6&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;counter-increment&lt;/span&gt;: h6; &lt;span style=&#34;color:#66d9ef&#34;&gt;content&lt;/span&gt;: counter(h2) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;counter(h3) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;counter(h4) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;counter(h5) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;counter(h6) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;. &amp;#34;&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nocount&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nocount&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h4&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nocount&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h5&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nocount&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;h6&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nocount&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;content&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;counter-increment&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;none&lt;/span&gt;;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I only have a single &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag in my document which is for the title of the post, which I don&amp;rsquo;t want numbered. The code above it ensures that every time we run across an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; tag it will reset the counter for &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; tags to 0, increment the counter for &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; tags, and then display the current value of the counter.&lt;/p&gt;
&lt;p&gt;It repeats this for all header tags appending the counter for each subsequent tag level.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also included provisions for ensuring that you can skip incrementing the counters if you add a &lt;code&gt;.nocount&lt;/code&gt; class to any header.&lt;/p&gt;
&lt;h3 id=&#34;flexible-visual-line-up&#34;&gt;Flexible visual line-up&lt;/h3&gt;
&lt;p&gt;This was probably the hardest part.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xangelo.ca/img/devlog/blog/flexible-line.png&#34; alt=&#34;flexible-line&#34;&gt;&lt;/p&gt;
&lt;p&gt;That dashed line that lets you link a post with the corresponding date. Both elements are positioned at the exterior of their boxes, and the titles have a varying width.&lt;/p&gt;
&lt;p&gt;In order to accomplish this I ended up needing to introduce a 3rd element, the line itself. However, I can&amp;rsquo;t actually use an &lt;code&gt;&amp;lt;hr /&amp;gt;&lt;/code&gt; tag because I want to work towards supporting screen readers.. and those tags get interpreted as dividers between content.&lt;/p&gt;
&lt;p&gt;The article list is an unordered list, so the HTML code looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/link/to/post&amp;#34;&lt;/span&gt;&amp;gt;Post Title&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;divider&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pubdate&amp;#34;&lt;/span&gt;&amp;gt;YYYY-MM-DD&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I set the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag to utilize flex &lt;code&gt;display: flex&lt;/code&gt; and tell it to align the items to the center&lt;/p&gt;
&lt;p&gt;I then set the &lt;code&gt;.divider&lt;/code&gt; to &lt;code&gt;flex-grow: 1&lt;/code&gt; &lt;sup id=&#34;fnref1:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; and don&amp;rsquo;t set the property on the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or &lt;code&gt;.pubdate&lt;/code&gt; elements. This causes the divider to grow to take up the entirety of space within the list element, subtracting the side of the title/date tags.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;article-list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;list-style&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;none&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;align-items&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;center&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;article-list&lt;/span&gt; .&lt;span style=&#34;color:#a6e22e&#34;&gt;divider&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;flex-grow&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;border-bottom&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dashed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;black&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;rem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;darklight-mode&#34;&gt;Dark/Light mode&lt;/h3&gt;
&lt;p&gt;One of the things that I ended up implementing, that I&amp;rsquo;m not 100% sold on is the auto dark/light mode. Utilizing CSS we can adjust things to account for if the user is utilizing a light or dark mode on their browser:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#66d9ef&#34;&gt;media&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;prefers-color-scheme&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;dark&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/* your stuff goes here */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s a very simple technique and given the minimalist nature of this site it works rather perfectly.&lt;/p&gt;
&lt;p&gt;Where I&amp;rsquo;m not 100% happy is on color choices. Where possible I attmpted to tweak things so that they would look the same in light or dark mode. I tweaked the original colors of links (new/visited) and also settled on a particular code-highlighting style.&lt;/p&gt;
&lt;p&gt;Where I&amp;rsquo;m not 100% happy, is with the default font color. In light mode it&amp;rsquo;s browser defaults, but in dark mode it&amp;rsquo;s a blue/grey and I think it might be a tad too dark. It&amp;rsquo;s something that I&amp;rsquo;ll continue tweaking in small batches until I find something that works well.&lt;/p&gt;
&lt;p&gt;I also faded out images just a bit so that they&amp;rsquo;re not so jaring. The idea is if you hover/touch the images they&amp;rsquo;ll fade in to full color, but if you&amp;rsquo;re just scrolling through you won&amp;rsquo;t run into any weirdness.&lt;/p&gt;
&lt;h3 id=&#34;support-for-utterances&#34;&gt;Support for Utteranc.es&lt;/h3&gt;
&lt;p&gt;This&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; is something that I recently stumbled across - the ability to utilize GitHub issues to track comments on a site. I really love the idea - especially since I&amp;rsquo;m hosting my blog on GitHub Pages. By adding some params to your &lt;code&gt;config.toml&lt;/code&gt; file you&amp;rsquo;ll be able to turn on support for utterances.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;utterances&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;repo&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AngeloR/angelor.github.io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;issue_term&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pathname&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;comment&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;preferred-color-scheme&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The settings match exactly the configuration options provided by utteranc.es, so you should be able to see the mapping quite easiy. The only thing I changed was making it &lt;code&gt;issue_term&lt;/code&gt; instead of &lt;code&gt;issue-term&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t add this configuration, it&amp;rsquo;ll just hide the comment block and you won&amp;rsquo;t even load the utteranc.es client js.&lt;/p&gt;
&lt;h2 id=&#34;downloadinstall&#34;&gt;Download/Install&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re interested in this theme, you can grab it here &lt;a href=&#34;https://github.com/AngeloR/plain-hugo-theme&#34;&gt;https://github.com/AngeloR/plain-hugo-theme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Up to date installation instructions can be found on the readme, but I&amp;rsquo;ve included a snapshot of what they were at this point:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/AngeloR/plain-hugo-theme /path/to/hugo/themes/plain/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Edit your config.toml to add the following line:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;theme &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plain&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If you do end up using it and come across any bugs, please let me know over on GitHub!&lt;/p&gt;
&lt;h2 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AngeloR/plain-hugo-theme&#34;&gt;https://github.com/AngeloR/plain-hugo-theme&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/rfc/rfc7993.txt&#34;&gt;https://tools.ietf.org/rfc/rfc7993.txt&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://westleysz.com/&#34;&gt;http://westleysz.com/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://utteranc.es/&#34;&gt;https://utteranc.es/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Moving to Hugo and GitHub Pages</title>
      <link>https://xangelo.ca/posts/hugo-github/</link>
      <pubDate>Wed, 03 Jun 2020 14:00:00 -0000</pubDate>
      
      <guid>https://xangelo.ca/posts/hugo-github/</guid>
      <description>&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been running my blog over on Ghost&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; for a few years now. I really don&amp;rsquo;t have a lot of issues with it, except for the fact that I have to manage the server itself. I&amp;rsquo;ve been running a small Digital Ocean VPS for a number of years where I host my blog. Ghost itself goes through a lot of updates and keeping the application up to date was starting to become a hassle.&lt;/p&gt;
&lt;p&gt;I was keen to move to a solution where I could&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write my posts in markdown&lt;/li&gt;
&lt;li&gt;Not have to worry about hosting/management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After looking at a few different solutions I ended up settling on a static site that was hosted through GitHub. The benefits of this was that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I could have all my content stored on GitHub.&lt;/li&gt;
&lt;li&gt;I could utilize GitHub pages to serve the site with a custom domain name (with SSL)&lt;/li&gt;
&lt;li&gt;I wouldn&amp;rsquo;t need to keep everything up to date&lt;/li&gt;
&lt;li&gt;I could re-purpose my VPS for other things&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, not all static sites are created the same. I specifically settled on Hugo to power my static site.&lt;/p&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;
&lt;p&gt;Unlike more traditional blogging software (WordPress, Ghost, etc.) which saves your posts in a database, Hugo&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; generates a bunch of static files (HTML) for each post. By doing this you&amp;rsquo;re still able to have the more complex features (tagging, drafts, pagination, themeing, etc.) but because Hugo pre-processes everything, you&amp;rsquo;re just left with a bunch of HTML files that represent your site. Once you&amp;rsquo;re happy, you can just sync the generated files with your server. In my case, I&amp;rsquo;m simply able to &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; my content to GitHub.&lt;/p&gt;
&lt;h3 id=&#34;dynamic-blogging-platforms&#34;&gt;Dynamic Blogging Platforms&lt;/h3&gt;
&lt;p&gt;Lets look at Wordpress to contrast Hugo. WordPress is the most used blogging software in the world and has the following requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The implicit requirement is also a server that supports these two. That means you are either relying on a 3rd party host that manages the server and just exposes the Wordpress interface&amp;hellip; or you are managing that server yourself.&lt;/p&gt;
&lt;p&gt;Most blogging systems work this way - Some language requirement, and some database system for storing the data you create.&lt;/p&gt;
&lt;p&gt;However, there&amp;rsquo;s lots of additional caveats that you aren&amp;rsquo;t normally aware of, that tend to bite you later:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to run a web server, either Apache or Nginx&lt;/li&gt;
&lt;li&gt;You need to keep the server itself up to date (security patches)&lt;/li&gt;
&lt;li&gt;You need to keep Apache|Nginx/PHP/MySQL up to date (security patches)&lt;/li&gt;
&lt;li&gt;You need to manage database backups (what happens if your server crashes)&lt;/li&gt;
&lt;li&gt;You need to keep WordPress up to date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s a heck of a lot of stuff for something that&amp;rsquo;s supposed to be easy. And I just picked WordPress because it&amp;rsquo;s popular. Almost every blogging system is the same way.&lt;/p&gt;
&lt;p&gt;Except for static site generators.&lt;/p&gt;
&lt;h3 id=&#34;static-site-generators&#34;&gt;Static Site Generators&lt;/h3&gt;
&lt;p&gt;Static Site Generators are a different way to approach blogging that merges more recent tooling with traditional delivery methods. That&amp;rsquo;s just a fancy way of saying Static Site Generators give you some tooling to generate a bunch of HTML documents that represent your site.&lt;/p&gt;
&lt;p&gt;With Hugo, I install hugo locally.. write some markdown for my posts, and then use Hugo to generate the HTML for my site. With this, we bring our &amp;ldquo;management&amp;rdquo; layer down to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;li&gt;Web server (nginx/apache)&lt;/li&gt;
&lt;li&gt;The hosting server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo runs locally, so the surface of attack is pretty minimal. There&amp;rsquo;s nothing really wrong with running an outdated version of Hugo except you won&amp;rsquo;t get the most recent features/bug fixes. But there&amp;rsquo;s no security implications of doing so.&lt;/p&gt;
&lt;p&gt;Since the output from Static Site Generators is just .. static content it can be hosted anywhere. You can use a hosting provider, a VPS, S3+CloudFront, or.. GitHub Pages!&lt;/p&gt;
&lt;h2 id=&#34;github-pages&#34;&gt;GitHub Pages&lt;/h2&gt;
&lt;p&gt;GitHub pages is a feature of GitHub that is available to all accounts, regardless of subscription. GitHub pages allows you to serve static content from any repository you&amp;rsquo;d like. They have some rules around how you need to organize your code and how to configure your site (project vs. main) but it&amp;rsquo;s all relatively straight forward.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t really hosted much on GitHub pages, but it&amp;rsquo;s very easy - They also have a great walkthrough page&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; that shows you how to configure the kind of Static Site you want to host.&lt;/p&gt;
&lt;h2 id=&#34;project-configuration&#34;&gt;Project Configuration&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m not going to go into too much detail, because both Hugo and GitHub have very good introductions, but this should be enough to get a site running.&lt;/p&gt;
&lt;h3 id=&#34;installing-hugo&#34;&gt;Installing Hugo&lt;/h3&gt;
&lt;p&gt;Installing Hugo can be done from a terminal in your chosen operating system. There are alternate installation instructions available if you don&amp;rsquo;t have brew installed or if you don&amp;rsquo;t have a mac&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;setup-hugo&#34;&gt;Setup Hugo&lt;/h3&gt;
&lt;p&gt;Open up your terminal, and navigate to the place you want to store your website. Then you can run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site mysite
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This creates a new folder called &lt;code&gt;mysite&lt;/code&gt; that contains the raw files for your static site. At this point you don&amp;rsquo;t have anything generated just the files that will eventually be compiled into your static site.&lt;/p&gt;
&lt;p&gt;You can install a theme by doing the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;You can actually choose whatever theme you would like from &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;  &lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;and just replace the &lt;code&gt;git submodule&lt;/code&gt; line with the instructions from your theme.&lt;/p&gt;
&lt;p&gt;Line 1 creates a git repository in the &lt;code&gt;mysite&lt;/code&gt; directory. We want this because themes in Hugo are installed via &lt;code&gt;git submodule&lt;/code&gt; which clones a particular repository into the current one. It also allows you to save the raw site (before static generation) to git!&lt;/p&gt;
&lt;p&gt;Now it&amp;rsquo;s time to head over to your &lt;code&gt;config.toml&lt;/code&gt; file and set up the defaults for your website. My config file looks like this. You only really need the configurations on the first 9 lines. The rest are just further configurations&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; that I&amp;rsquo;ve made.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;baseURL&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://xangelo.ca&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plain&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Xangelo.ca&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;author&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Angelo R&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;copyright&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copyright © 2011 - 2020&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;paginate&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;languageCode&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en-us&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enableInlineShortcodes&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;footnoteReturnLinkContents&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;subtitle&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Technical musings and other tidbits&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;highlight&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lineNos&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lineNumbersInTable&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tabWidth&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;tableOfContents&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;endLevel&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ordered&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;startLevel&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;create-and-test&#34;&gt;Create and test!&lt;/h3&gt;
&lt;p&gt;Hugo ships with a built in server that allows you to preview what your site will end up looking like, you can start it up with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server -w
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This creates the server and the &lt;code&gt;-w&lt;/code&gt; flag sets it to &amp;ldquo;watch&amp;rdquo;. Any changes that are made will automatically reload the server and also reload the site. You can visit this site by navigating to &lt;code&gt;https://localhost:1313&lt;/code&gt; in your browser.&lt;/p&gt;
&lt;p&gt;You can create a new post by using &lt;code&gt;hugo new posts/welcome.md&lt;/code&gt;. This creates a new Markdown file in the &lt;code&gt;posts/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;You can go ahead and edit that file - saving it will cause Hugo to live reload the website.&lt;/p&gt;
&lt;h3 id=&#34;publish-your-site&#34;&gt;Publish your site!&lt;/h3&gt;
&lt;p&gt;Once you&amp;rsquo;re happy with your stuff, you can turn off the live-reloading server and run the &lt;code&gt;hugo&lt;/code&gt; command. This parses all your information and generates the static files for your website. It will then put all this content in the &lt;code&gt;public/&lt;/code&gt; directory. If you followed the instructions from earlier around setting up GitHub Pages, you can &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;public/&lt;/code&gt; directory and set it up as another git repository.&lt;/p&gt;
&lt;p&gt;then running &lt;code&gt;git push &lt;/code&gt;will publish your static files to whatever GitHub repository you configured to host the site.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;I haven&amp;rsquo;t really dug too much into setting up GitHub pages because it&amp;rsquo;s mostly clicking around the interface and the instructions for that are kept up to date &lt;sup id=&#34;fnref1:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. I highly recommend GitHub pages because of the ease of setting up&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom domain names (if you have your own domain it&amp;rsquo;s trivial to point it to your GitHub pages site)&lt;/li&gt;
&lt;li&gt;Custom domain name SSL certificafte. Most places only allow you custom SSL certs if you use a subdomain, but GitHub lets you use a custom domain name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also highly suggest you spend some time going through the themes&lt;sup id=&#34;fnref1:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; on Hugo to find one that you really like. There are so many and it&amp;rsquo;s so easy to make new themes that you&amp;rsquo;ll definitely find one you like.&lt;/p&gt;
&lt;h2 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Ghost, a node.js based blogging engine: &lt;a href=&#34;https://ghost.org/&#34;&gt;https://ghost.org/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Hugo, static site generatror: &lt;a href=&#34;https://gohugo.io&#34;&gt;https://gohugo.io&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;GitHub Pages setup:  &lt;a href=&#34;https://pages.github.com/&#34;&gt;https://pages.github.com/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;Hugo installation: &lt;a href=&#34;https://gohugo.io/getting-started/installing&#34;&gt;https://gohugo.io/getting-started/installing&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;Hugo themes: &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;
&lt;p&gt;Hugo configuration options: &lt;a href=&#34;https://gohugo.io/getting-started/configuration-markup&#34;&gt;https://gohugo.io/getting-started/configuration-markup&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Serverless with CloudFlare Workers</title>
      <link>https://xangelo.ca/posts/what-is-lootcap/</link>
      <pubDate>Thu, 07 May 2020 17:31:57 -3100</pubDate>
      
      <guid>https://xangelo.ca/posts/what-is-lootcap/</guid>
      <description>&lt;h2 id=&#34;what-is-lootcap&#34;&gt;What is LootCap?&lt;/h2&gt;
&lt;p&gt;Last week we (&lt;a href=&#34;https://twitter.com/AdamScochran&#34;&gt;Adam Cochran&lt;/a&gt; and myself) launched &lt;a href=&#34;https://lootcap.com&#34;&gt;LootCap&lt;/a&gt;. The goal is to provide tracking on a new class of tokens called &lt;a href=&#34;https://medium.com/@adamscochran/what-are-loot-tokens-understanding-an-emerging-asset-class-380b0cc38749&#34;&gt;Loot&lt;/a&gt;. It&amp;rsquo;s been a few years since I used to work at Vault of Satoshi and since that time I fell a bit out of Crypto Currencies. I always felt that most of the buzz around them was focused on the tech or the coin itself. It never provided any value. It felt like most coins out there were focused on trying to re-create the trajectory of Bitcoin rather than trying to DO anything. Ethereum was different. It was different enough to force me to pay attention. It allows you to run &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/07smart-contracts-solidity.asciidoc#what-is-a-smart-contract&#34;&gt;Smart Contracts&lt;/a&gt;. In recent years you&amp;rsquo;ve likely seen &amp;ldquo;Tokens&amp;rdquo; suddenly gain popularity. Well those are primarily powered by Ethereum. Again, however, it felt like tokens were just trying to recreate the Bitcoin boom.&lt;/p&gt;
&lt;p&gt;Recently however, Loot tokens have become a thing. To condense Adam&amp;rsquo;s &lt;a href=&#34;https://medium.com/@adamscochran/what-are-loot-tokens-understanding-an-emerging-asset-class-380b0cc38749&#34;&gt;article&lt;/a&gt; (which you should read if you&amp;rsquo;re interested in this stuff)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Loot tokens are earned by contributing to communities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What that means is, instead of you buying the token, the community you belong to gives you the token because your contributions to the community have some merit. It&amp;rsquo;s a way to reward content creators for utilizing your community platform.&lt;/p&gt;
&lt;p&gt;When Adam first approached me about the idea for &lt;a href=&#34;https://lootcap.com&#34;&gt;LootCap&lt;/a&gt; I was on board - this was the first timssse I saw a use for Crypto that wasn&amp;rsquo;t being sold as &amp;ldquo;Well it&amp;rsquo;s crypto so it&amp;rsquo;s just better!&amp;rdquo;. My task was to build a simple Market Cap site targeting a select number of these tokens that actually qualify as &amp;ldquo;Loot&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;planning&#34;&gt;Planning&lt;/h2&gt;
&lt;p&gt;The first step in any project is to have a plan. This doesn&amp;rsquo;t mean that I have some giant design document sitting on my computer, or is it scrawled on a napkit. It varies for every project. In this case, a markdown document with some relatively simple diagrams via mermaidjs was more than enough. In fact, the goal of the site could be expressed in a single sentence.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Display relevant market-cap information quickly to everyone&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;m also a firm believer in starting application development from the data side of things. The data is the only constant in your application. Everything is just abstracting away queries for your users to display the data in ways that make sense. So that&amp;rsquo;s where I begin.&lt;/p&gt;
&lt;h3 id=&#34;database-design&#34;&gt;Database Design&lt;/h3&gt;
&lt;p&gt;Whenever I start a project I do the same thing, from the technical side.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What will be UI look like?&lt;/li&gt;
&lt;li&gt;What data do I need to make this happen?&lt;/li&gt;
&lt;li&gt;How do I store the data?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Weird right? The hard thing about database design, traditionally, is that the original wisdom is normalization. That is, data should be split apart into smaller isolated pieces. This idea is one that we use in software development all the time - Don&amp;rsquo;t Repeat Yourself (DRY). By splitting the data into smaller units we&amp;rsquo;re not storing more data than we need to store. When your databases start getting to the 10s of millions of rows storing unnecessary data can get expensive. Expensive because it&amp;rsquo;s a lot of work to keep the same piece of data updated across different tables, but also expensive because storage is expensive.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve always believed that the reason that normalization existed is two fold&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Resources were expensive. Going from 8GB to 16GB HDDs were a huge financial leap.&lt;/li&gt;
&lt;li&gt;Development was segmented. DBAs worked in isolation, and often against, developers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As a database designer, you already know all the normalization rules. So take a look at how the application is being designed. What pieces if information are always shown together. What is important and what isn&amp;rsquo;t? These questions can help you better shape your database design.&lt;/p&gt;
&lt;p&gt;With these things in mind, I took a look at my UI, drawing inspiration from the many market-cap sites devoted to crypto currencies. After all, while Tokens aren&amp;rsquo;t Coins, they&amp;rsquo;re treated quite similarly. This wasn&amp;rsquo;t something I did in isolation - Adam has been a part of the crypto community for much longer than I have and I heavily relied on his expertise in defining what data we want to showcase.&lt;/p&gt;
&lt;p&gt;Knowing what data I had to display for a first pass, and how my data was organized I opted to skip a database entirely.&lt;/p&gt;
&lt;p&gt;See it turns out I can assemble most of the information I need from various 3rd parties, cache it in memory, and when that cache expires, grab the information from the sources and assemble it again.&lt;/p&gt;
&lt;p&gt;This worked because the scope of the initial launch is small. I only need to display fairly static data (may change every few minutes) that&amp;rsquo;s simultaneously general. I don&amp;rsquo;t need real-time precision at the moment. This means that I had a lot more flexibility in my architecture design, but also it meant that apart from the cache load/reload events, serving this data would be as fast as I can possible make it.&lt;/p&gt;
&lt;h3 id=&#34;application-architecture&#34;&gt;Application Architecture&lt;/h3&gt;
&lt;h4 id=&#34;api&#34;&gt;API&lt;/h4&gt;
&lt;p&gt;When designing any application I always start with my API. It allows me to define my endpoints and figure out how I&amp;rsquo;m going to breaking up the data so that I can return the most relevant data for an endpoint. That is, now that I&amp;rsquo;ve broken down how I&amp;rsquo;m going to store my data, what&amp;rsquo;s the best way to create my endpoints so that I have the flexibility to compose the UI that I have envisioned, but also allows me to change that front end as necessary.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a tough nut to craft. If you pop open your console on &lt;a href=&#34;https://lootcap.com&#34;&gt;LootCap&lt;/a&gt; you&amp;rsquo;ll see that we make requests to 2 different endpoints:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/api/v1/contracts/[contract-address]/price

/api/v1/coin/ethereum/price
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For us, that&amp;rsquo;s enough to render the entire first page and also preload some data so that if you click on any Token for more information, that data is already loaded and ready for you. I also made sure to version the end-points. The reason for this is to differentiate between deployment/releases. We can roll out new functionality to the API endpoints and test them to our hearts content before releasing front-end changes and deprecating the old API versions. We can also split test UI designs if we are interested in such a thing. Versioning your API endpoints is vital.&lt;/p&gt;
&lt;p&gt;In original dev versions, you could actually supply multiple contract addresses, comma separated, and it would return all the data at once. It was a way to reduce 7 or 8 calls to load the page into 2.&lt;/p&gt;
&lt;p&gt;Obviously that&amp;rsquo;s not what happened in production, but we&amp;rsquo;lll get to that later.&lt;/p&gt;
&lt;h4 id=&#34;front-end&#34;&gt;Front end&lt;/h4&gt;
&lt;p&gt;The front-end for the app is actually just a SPA. We load some minimal HTML and dynamically populate the data as soon as we can. The idea behind this is that once we hit production, we can cache the static content for much longer periods of time improving response times which would help us achieve our original goal of Displaying relevant market-cap information quickly for everyone.&lt;/p&gt;
&lt;p&gt;We are using a two different 3rd party libraries on the front-end.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mvp.css - &lt;a href=&#34;https://andybrewer.github.io/mvp/&#34;&gt;https://andybrewer.github.io/mvp/&lt;/a&gt; - because we wanted a simple, classless, css framework as a base&lt;/li&gt;
&lt;li&gt;BigNumber - &lt;a href=&#34;https://mikemcl.github.io/bignumber.js&#34;&gt;https://mikemcl.github.io/bignumber.js&lt;/a&gt; - because dealing with crypto numbers in JS can be challenging.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We aren&amp;rsquo;t using React, and so for the times where we have to update the Dom we&amp;rsquo;re using this function and interacting directly with the Element nodes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; document;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelectorAll&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re also relying on &lt;code&gt;fetch&lt;/code&gt; since all our endpoints are very simple &lt;code&gt;GET&lt;/code&gt; based requests.&lt;/p&gt;
&lt;p&gt;We are also using a very rudimentary SPA router that relies on css classes to define routes. We&amp;rsquo;re only able to do this because we have 2 routes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;routeTable&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;route-name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;REGEX_MATCH&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.route.active&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;classList&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;requestedRoute&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;routeTable&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;some&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt; =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;requestedRoute&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;requestedRoute&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`#route-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;classList&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// clear the info page
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#route-info&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.route.default&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;classList&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;going-live&#34;&gt;Going Live&lt;/h2&gt;
&lt;h3 id=&#34;heroku&#34;&gt;Heroku&lt;/h3&gt;
&lt;p&gt;Once I had a copy working locally it was time to deploy it. &lt;a href=&#34;https://heroku.com&#34;&gt;Heroku&lt;/a&gt; has long been my dpeloyment strategy of choice for projects that are undergoing rapid development. I always use git, but I don&amp;rsquo;t always use a git hosting provider (GitLab/GitHub). Since heroku supports deploying from git, so I&amp;rsquo;m able to deploy from my dev env to share.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t had a chance to mess with Heroku for yourself, I high recommend you do. It&amp;rsquo;s a wonderful service that allows you virtually unlimited free applications, and you can easily build your PoC without concern.&lt;/p&gt;
&lt;p&gt;They also offer numerous paid plans that you can use to take your service from PoC to live by clicking a few buttons. My initial thoughts on architecture were pretty standard. Perhaps two &amp;ldquo;dynos&amp;rdquo; or servers+load-balancer would be more than enough. We have no state, just in-mem caches, I don&amp;rsquo;t care if the caches are repliced for eahc node. Base price like 20$ a month easy.&lt;/p&gt;
&lt;h3 id=&#34;serverless&#34;&gt;Serverless?&lt;/h3&gt;
&lt;p&gt;However this is somethign we&amp;rsquo;re launching for fun. While spending 20$ for infrastructure (bandwidth might cause some overage) is certainly doable.. is it the best option for us?&lt;/p&gt;
&lt;p&gt;For one thing, with any cloud provider, if I&amp;rsquo;m running a container or vm, I&amp;rsquo;m stuck to a paricular data-center. That&amp;rsquo;s not very helpful if someone in Japan wants to take a look at my site. Remember, our goal was to provide this information quickly for everyone.&lt;/p&gt;
&lt;p&gt;So maybe we look at &lt;strong&gt;SERVERLESS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The idea behind server less infrastructure is simply: You write apps that are designed as &amp;ldquo;functions&amp;rdquo;. These functions are deployed and spun up/down as necessary. Scale becomes pretty straight-forward. The infrastructure is available, it&amp;rsquo;s just a matter of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How much do you want to pay?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s the cold-start time on your app?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The payment is pretty straight foward. Since these serverless tends to be small apps that cater well to &amp;ldquo;bursty&amp;rdquo; applications in terms of requests, they tend to be cheaper to run.&lt;/p&gt;
&lt;p&gt;Most of these providers will take your app out of the pool if you don&amp;rsquo;t get any requests for a preset amount of time. This is to free up compute space for other apps. The time to start for an app NOT currently pre-loaded is what&amp;rsquo;s refered to as &amp;ldquo;cold start&amp;rdquo;. That varies, mostly reliant on the size of the application you&amp;rsquo;re starting, but there is a baseline cost regardless.&lt;/p&gt;
&lt;p&gt;And of course, all &amp;ldquo;Serverless&amp;rdquo; is really server-based. They just abstract that away from you. That means I&amp;rsquo;m still on the hook for running these in multiple data centers around the world to hit my goals.&lt;/p&gt;
&lt;h3 id=&#34;cloudflare-workers-and-kv&#34;&gt;CloudFlare Workers and KV&lt;/h3&gt;
&lt;p&gt;Then I ran across CloudFlare Workers. I remember seeing the announcement post some time back, and thought &amp;ldquo;hey that&amp;rsquo;s neat&amp;rdquo; but quickly pushed it out of my mind. I returned to CloudFlare workers and did some more investigation.&lt;/p&gt;
&lt;p&gt;Oh My. I think CloudFlare Workers are the only TRUE serverless mechanism out there.&lt;/p&gt;
&lt;p&gt;CloudFlare workers are essentially serverless functions.. except they run at every CloudFlare Point-of-Presence (PoP). They have milliseconds of cold-start time, and they run globally. They do have way more restrictions than traditional serverless offerings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1MB compressed filesize&lt;/li&gt;
&lt;li&gt;50ms CPU time&lt;/li&gt;
&lt;li&gt;max 30 workers&lt;/li&gt;
&lt;li&gt;&amp;lt; 50 subrequests per worker (redirects count!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I felt that if we COULD work within their limits, it would bring us closest to what we needed. They also offered an eventually consistent KV store that was accessible from the workers. Since our data was cached anyway, we didn&amp;rsquo;t care about the eventual consistency - worst case we served stale data for a minute more than we expected.&lt;/p&gt;
&lt;p&gt;After a couple of days of fiddling with their tooling and documentation, I was able to convert our regular API into a bunch of &amp;ldquo;serverless&amp;rdquo; functions that worked with the KV store and were deployed to all CloudFlare PoP.&lt;/p&gt;
&lt;p&gt;Today, when you load &lt;a href=&#34;https://lootcap.com&#34;&gt;LootCap&lt;/a&gt; you&amp;rsquo;re loading data from 3 different workers&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Two running API endpoints&lt;/li&gt;
&lt;li&gt;1 Running a static site&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>The Disk Is Slow</title>
      <link>https://xangelo.ca/posts/the-disk-is-slow/</link>
      <pubDate>Wed, 29 Apr 2020 16:21:29 -2100</pubDate>
      
      <guid>https://xangelo.ca/posts/the-disk-is-slow/</guid>
      <description>&lt;p&gt;&amp;ldquo;The disk is slow&amp;rdquo; is one of those things that most programmers take for granted. Yes it is slow given the speed of other components. But rarely have programmers taken the time to dig into WHY the disk is slow and what that actually means. Yet, doing so can lead us down some interesting rabbit holes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xangelo.ca/img/silver-hard-drive-internals.jpg&#34; alt=&#34;Disk&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-is-slow&#34;&gt;What is slow?&lt;/h2&gt;
&lt;p&gt;For a while now the speed of a hard-drive was measured in RPM or Revolutions Per Minute. This is an indication of how quickly the disk can spin. It is common now-days to see drives advertising 7,200 rpm, or 10,000 rpm or even 15,000 rpm. How fancy.&lt;/p&gt;
&lt;p&gt;Now, the disk itself is split into a couple major components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The disks that data is stored on:&lt;/li&gt;
&lt;li&gt;The read/write head&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These disks are where the data is actually stored, and when you see a number like &amp;ldquo;7,200 rpm&amp;rdquo; what you are seeing is how quickly these disks can spin. In a simplified manner, what happens when you &amp;ldquo;write something to disk&amp;rdquo;, is that the disk spins to an empty point, and the head beings to write. Likewise, when you &amp;ldquo;read&amp;rdquo; data from the disk, it spins to a designated point (the &amp;ldquo;start&amp;rdquo; of the data) and the head begins to &amp;ldquo;read&amp;rdquo; the data until it is done.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s walk through a theoretical &amp;ldquo;disk&amp;rdquo;. Your &amp;ldquo;disk&amp;rdquo; can hold 8 units (00000000) of storage. We are going to perform a few actions on this disk.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;You write &amp;#39;a&amp;#39; twice - aa000000  
You write &amp;#39;b&amp;#39; 3 times - aabbb000 
You delete the two &amp;#39;a&amp;#39;   - 00bbb000 
You write &amp;#39;c&amp;#39; 4 to,es - ccbbbcc0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See your drive is smart enough to know that, even though there isn&amp;rsquo;t enough &amp;ldquo;contiguous&amp;rdquo; space, there is still enough space scattered around on the drive to store your 4 units of &amp;lsquo;c&amp;rsquo;. What happens is that your drive will spin to a free location, and let you start writing. When you run out of contiguous space, it will spin to a new location. This results in your data actually spread out all over your drive instead of next to each other. This is a good thing, of course. It means that you can use all the space on your drive without worrying about WHERE things are stored.&lt;/p&gt;
&lt;p&gt;But, it also means that instead of the disk spinning just ONCE to get to the start of your data, it actually needs to spin twice.&lt;/p&gt;
&lt;p&gt;As we grow our disk size from &amp;ldquo;8 units&amp;rdquo; to hundreds of gigabytes as most modern drives today have, we run into a problem - there is no guarantee that the data we need will be next to each other. In actuality, there is a high probability that we will need to keep jumping about on the disk to be able to read ALL the data we want. Our data ends up &amp;ldquo;fragmented&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;data-fragmentation&#34;&gt;Data Fragmentation&lt;/h2&gt;
&lt;p&gt;The result of all this fragmentation, is that things just get slower over time. Unfortunately, the eventual degradation of data storage efficiencies is never attributed to the hard-drive because users don&amp;rsquo;t actually USE the hard-drive directly - they go through the OS which is supposed to manage these things. As a result, the eventual experience of degrading of performance is chalked up to &amp;ldquo;my Windows is slow&amp;rdquo;. Operating systems combatted this eventual degradation by shipping with a defragmenter, which does exactly what you&amp;rsquo;d expect. It takes all these scattered fragments from around your drive, and puts them next to each other. This reduces the overall amount of seeks necessary to retrieve necessary information, thereby making things speedier.&lt;/p&gt;
&lt;p&gt;But that&amp;rsquo;s an expensive (resource wise) thing to do. In order to defragment a system, the program needs to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find an application that has its data fragmented&lt;/li&gt;
&lt;li&gt;copy the data between the fragmented data to memory or some other free space on the drive&lt;/li&gt;
&lt;li&gt;move the data closer together.&lt;/li&gt;
&lt;li&gt;repeat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets go back to our previous scenario, and see how defragmentation could work:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Initial State: ccbbbcc0

Step 1:        cc0bbccb
Step 2:        cccbbc0b
Step 3:        ccc0bcbb
Step 4:        ccccb0bb
Step 5:        cccc0bbb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Obviously this is not optimized in any way, so there&amp;rsquo;s plenty we could do to speed this up. But this is essentially what your drive is doing. It&amp;rsquo;s like putting a deck of cards back in order after you&amp;rsquo;ve been shuffling them. Sure it&amp;rsquo;s possible, but it just takes some time.&lt;/p&gt;
&lt;p&gt;A much better idea, would be to try and optimize STORING this data in such a way that would reduce fragmentation. That is, maybe we keep data that is related next to each other on the drive when we WRITE the data the first time. That way things don&amp;rsquo;t get as fragmented as quickly.&lt;/p&gt;
&lt;h2 id=&#34;blocks-and-pages&#34;&gt;Blocks and Pages&lt;/h2&gt;
&lt;p&gt;The first step in ensuring data is kept close together is the idea of &amp;ldquo;blocks&amp;rdquo;. Basically the filesystem that actually interacts with the hard-drive will define a &amp;ldquo;block-size&amp;rdquo;. The block size is basically a measure of how much data will fix in a block, and the filesystem reads/writes in blocks instead of individual bytes. Think of it this way: If your hard-drive was a piece of lined paper, we were originally writing things down one word per line. With blocks, we basically said &amp;ldquo;well, we&amp;rsquo;ll just write until we reach the horizontal end of this line&amp;rdquo;. So now instead of one word per line, we have a few words per line. Perhaps, we could say, we have have one sentence per line.&lt;/p&gt;
&lt;p&gt;Using our previous 8 unit drive example, we could sub-divide that into blocks of 2 units, making it look like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Drive State: [c,c][c,c][b,b][b,0]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now when we want to read all the c values, we have two seeks instead of 1 per record. This is already a big improvement (we&amp;rsquo;ve reduced seeks by 50%), but we could probably reduce it even more. Since the filesystem has to expose a standard block size to all applications, systems that have to have a high amount of HDD I/O need an alternative. The easiest thing to do, is take the concept of a block containing records and create another abstraction: a page containing blocks.&lt;/p&gt;
&lt;p&gt;At its &amp;ldquo;lowest&amp;rdquo; level, a relational database deals with &amp;ldquo;pages&amp;rdquo;. Pages are really  just collections of the data that you are storing. Relational databases (non-relational databases might as well, but I haven&amp;rsquo;t really dug into the internals of a lot of them) utilize this concept of a &amp;ldquo;page&amp;rdquo; to further decrease IO latency with the disk. Rather than dealing with the storage of individual records or information, it groups records together into a &amp;ldquo;page&amp;rdquo; and uses that. It will read/write a  whole page. This allows them to capitalize on the assumption that when you are reading/writing data the data you are accessing is probably next to other data that you also require.&lt;/p&gt;
&lt;p&gt;They even go so far as to let you customize this via &amp;ldquo;clustered keys&amp;rdquo;. A clustered key is just a mechanism to allow you, the database administrator, to define HOW the database orders the data within pages. As the administrator, you know the data you are trying to store, and the primary ways that it might be accessed. Databases give you the ability to say &amp;ldquo;well, group all these records together on the disk by the values in this column&amp;rdquo;. This creates pages that are grouped around a particular value (a userID for example), so that all records with that same value are near each other.&lt;/p&gt;
&lt;p&gt;Think of a database where you want to associate a list of items with a user. You have two tabes, &lt;code&gt;users&lt;/code&gt; and &lt;code&gt;items&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+-------+    +---------+
| users |    |  items  |
+-------+    +---------+
| id    |    | id      |
| name  |    | user_id |
+-------+    | name    |
             +---------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It would make sense to create a clustered key around the userID in the items table. This allows us to keep all items that belong to a single user in the same page, or group of pages, on the disk. This way, when we try and retrieve the items for a user, the database management system can fetch all the pages related to this user, stick them in memory, operate on them, and then write them all.&lt;/p&gt;
&lt;p&gt;Databases are very intricate systems, and I don&amp;rsquo;t want you leaving thinking there isn&amp;rsquo;t a whole lot more to this whole concept. This is a HUGE simplification of what the database is actually doing, but it should provide you with an understanding of why it is doing some of that at a storage level.&lt;/p&gt;
&lt;h2 id=&#34;the-problem-with-blocks&#34;&gt;The problem with blocks&lt;/h2&gt;
&lt;p&gt;The block system, however, is not without its own problems. By using &amp;ldquo;blocks&amp;rdquo; we&amp;rsquo;ve introduced a bit of wasted space into our storage. Lets go back to our block example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Drive State: [c,c][c,c][b,b][b,0]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That trailing 0 in block 4 will remain empty unless we add more b data. We will be unable to add any more c values but we&amp;rsquo;ll be able to add more b. In fact, your drive will appear full to you because at the operating system level, it has no idea about the intricacies of your data storage. It just knows that these blocks are in use. So your 8 unit drive, has suddenly become 7 units.&lt;/p&gt;
&lt;p&gt;That kind of sucks, and is actually a fundamental problem with &amp;ldquo;blocks&amp;rdquo;. As long as you have data to write, blocks are great, but they will almost always result in the LAST block in a segment not being completely filled. This is natural of course, since whatever application is using that space generally doesn&amp;rsquo;t care to know (nor should it!) about the block size it needs to be using. The result of this is that the more &amp;ldquo;small files&amp;rdquo; you have on your drive, the more &amp;ldquo;slack space&amp;rdquo; you have on the drive - space that isn&amp;rsquo;t being used for anything, but is still seen as &amp;ldquo;used&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;So now we come to a decision, either we just leave that space empty and accept it as part of the operating costs, or we try and figure out how to utilize it. Engineers, (un)fortunately, are quite obsessed with performance. These &amp;ldquo;tails&amp;rdquo; (the last block) are inefficient, and could probably be removed with a bit of smart thinking. This results in two possible ways to resolve this problem.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We allow the filesystem to support variable block sizes&lt;/li&gt;
&lt;li&gt;We figure out how to use that tail block for something useful&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first way, variable block sizes, is something file systems like ZFS utilize in an attempt to have more efficient storage. Since you know the kind of data you will be using the drive for, ZFS will let you specify your block size. If you know you have a lot of small things that need to be stored, drop the block size, likewise, increase if you have large things. It even has some magic like block level compression to try and use those blocks to their fullest. It is a very simple idea - and as we know, the simple ideas are the hardest to implement!&lt;/p&gt;
&lt;p&gt;The second way, is another simple solution to the problem. If we know we have a bunch of tail blocks that are half-filled.. why don&amp;rsquo;t we just combine them? That way we aren&amp;rsquo;t creating a new tail block, but are instead re-using another tail block. This would result in another seek to read/write this data, but it ensures that we are using this disk to its fullest capacity. File systems like BTRFS will combine multiple tail blocks. The reason this is so effective is because the average block size is actually some multiple of 512 bytes. If you think about it, a text file might be a couple bytes? In a traditional file system that&amp;rsquo;s 1 block per couple bytes. That&amp;rsquo;s a heck of a lot of things you can stuff into a single block at that rate!&lt;/p&gt;
&lt;h2 id=&#34;changing-the-game&#34;&gt;Changing the game&lt;/h2&gt;
&lt;p&gt;As you can see, we&amp;rsquo;ve put a lot of work into reducing the seek time for hard-drives. They&amp;rsquo;ve been such a fundamental component of computing that it was a requirement. But, what if you could just ignore seeking entirely? What if there was a way to almost instantly seek? In computer science we refer to this as O(1). That is the size of the data we are looking through is irrelevant - we can access any section of the data as quickly as any other. Welcome to the world of solid state storage. Solid state storage utilizes electronics instead of mechanical instrumentation. That is, instead of a spinning disk and actuators for the read/write heads it used electrical circuits. By removing the mechanical parts, it eliminated the &amp;ldquo;seek&amp;rdquo; time of disks that we find so slow. The only problem was that it was expensive and hard to make ENOUGH storage this way. We could easily make HDDs that were several gigabytes, but were struggling to make solid state drives at megabytes. It just couldn&amp;rsquo;t keep up.&lt;/p&gt;
&lt;p&gt;Until it could.&lt;/p&gt;
&lt;p&gt;Now days solid state storage devices are relatively cheap and large enough for the average user. They a whole bunch of problems caused by mechanical components. They produce less heat, less vibrations, and they are a lot faster. In fact, for a lot of work-loads, it&amp;rsquo;s silly to rely on hard-drives when you can get so much better performance from solid state storage.&lt;/p&gt;
&lt;p&gt;How interesting&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s crazy to think of all that we&amp;rsquo;ve accomplished because of that little mechanical hard-drive. But what&amp;rsquo;s crazier is that we are only able to see this in retrospect. No one was able to see what the result of spinning disk drives would be. No would thought that we would invent so many different file systems to solve the problems. That we would make so many advancements in technology just to store MORE data on the drives. At the time, they were just better than tape. They were simply a step in the chain, that in retrospect, was pretty cool.
Follow the conversation at HackerNews &lt;a href=&#34;https://news.ycombinator.com/item?id=13091192&#34;&gt;https://news.ycombinator.com/item?id=13091192&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What the heck is a Database Index?</title>
      <link>https://xangelo.ca/posts/what-the-heck-is-a-database-index/</link>
      <pubDate>Wed, 29 Apr 2020 16:21:29 -2100</pubDate>
      
      <guid>https://xangelo.ca/posts/what-the-heck-is-a-database-index/</guid>
      <description>&lt;p&gt;When you do a standard &lt;code&gt;select * from table_name where columns=some_value&lt;/code&gt; from a table.. the database has no idea where IN the table that data exists. In order to figure out which rows in the table it needs to return to you (based on your where clause), it looks through the rows in the table. Of course, if you don&amp;rsquo;t set a limit clause, it has to look through EVERY single entry in the table because it doesn&amp;rsquo;t know where/how-many instances of a particular value it might find. This is a pretty common problem. Think of a standard &lt;code&gt;users&lt;/code&gt; table&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+-------------------+
|       users       |
+-------------------+
|                   |
| id (int)          |
| username (string) |
| password (string) |
|                   |
+-------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this scenario there are a couple different uses of this table .&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We are registering a user (inserting a row)&lt;/li&gt;
&lt;li&gt;A user might be changing their password (updating a row)&lt;/li&gt;
&lt;li&gt;A user is logging in (reading a row)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In a table without any indices when logging in we only know the users username and password. We have to run a &lt;code&gt;select * from users where username = ?&lt;/code&gt; on the database. Even if we add a &lt;code&gt;limit 1&lt;/code&gt; to our query, the database still needs to scan through every single row in our database until it finds one (or more) that matches our filter.&lt;/p&gt;
&lt;p&gt;If you create an index on a particular column in the table, it serves as a lookup. If you look for a row where a particular indexed column matches a value.. the database doesn&amp;rsquo;t need to scan the table, it can look at the index. You can think of an index exactly the same as as you would an index in a book. If you want to know where a word in the book occurs you have two choices.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can either flip through the entire book until you see what you&amp;rsquo;re looking for&lt;/li&gt;
&lt;li&gt;Consult the index, which tells you which page in the book you need to look at.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you tell the database that you want a particular column to have an index, you don&amp;rsquo;t need to do anything else. The database will ensure that the index is kept up to date (as you modify the data in the table). You also don&amp;rsquo;t need to change anything about how you&amp;rsquo;re accessing the data - (IE: you don&amp;rsquo;t need to modify your queries).&lt;/p&gt;
&lt;p&gt;Ok - so it sounds like indexes are pretty awesome right? If it speeds up looking things up, why don&amp;rsquo;t we create an index on every column?&lt;/p&gt;
&lt;p&gt;Well, like everything - there&amp;rsquo;s a caveat. READING data from the table is very quick with an index.. but Creating, Updating, and Deleting data becomes a bit slower. This is because the database needs some additional time to update the index with the new data. So it&amp;rsquo;s a bit of a balancing act. The more indices you have on a table.. the slower it becomes to write data to that table (insert/update/delete). You want to take a look at your table and how you&amp;rsquo;re using the data in your table and create the index carefully.&lt;/p&gt;
&lt;p&gt;Because of this, you can&amp;rsquo;t really have a &amp;ldquo;rule&amp;rdquo; on when to create an index - you&amp;rsquo;ll want to monitor your database and create them based on your investigations. Of course, it&amp;rsquo;s never that easy - the more data IN the table when you create the index the longer it will take to create. It doesn&amp;rsquo;t sound too bad - but if you have hundreds of thousands of rows in a table.. it can take a few minutes to create the index, during which your application will need to be down. So you need to be somewhat pre-emptive in creating your indices.. but also you can&amp;rsquo;t go overboard.. but also there isn&amp;rsquo;t really a guide on when to create an index. How wonderful.&lt;/p&gt;
&lt;p&gt;As you progress in your database tuning/development life you&amp;rsquo;ll find use-cases where it makes sense to have an index from the start. For example, most &amp;ldquo;user&amp;rdquo; tables will have an index on the username column. This is something that you can then take and implement on your next project!&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;I really recommend you peruse this documentation from mysql on what an index is. While you may be using Postgres/MSSQL - the core concepts of what an index is remains the same. &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/mysql-indexes.html&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/mysql-indexes.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
