<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Xangelo.ca</title>
    <link>https://xangelo.ca</link>
    <description>Recent content in Posts on Xangelo.ca</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2011 - 2022</copyright>
    <lastBuildDate>Tue, 05 Dec 2023 05:16:29 -0500</lastBuildDate><atom:link href="https://xangelo.ca/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Amplify docker limitations</title>
      <link>https://xangelo.ca/posts/amplify_docker/</link>
      <pubDate>Tue, 05 Dec 2023 05:16:29 -1600</pubDate>
      
      <guid>https://xangelo.ca/posts/amplify_docker/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently had the chance to do some work wtih Amplify in AWS and I&amp;rsquo;m surprised how simultaneously feature rich and half baked it is. It seems if you&amp;rsquo;re in to click-ops you&amp;rsquo;ll be fine in Amplify until you hit a problem.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re deploying through amplify you&amp;rsquo;ll eventually hit this problem:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[BUILD_CONTAINER_UNABLE_TO_PULL_IMAGE: Unable to pull customer&#39;s container image. CannotPullContainerError: Error response from daemon: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which seems perfectly reasonable at first glance. Nowhere in your project setup did you really define credentials for your docker account.&lt;/p&gt;
&lt;p&gt;But if you dig a bit it gets weird: You actually can&amp;rsquo;t define credentials for a docker account.. and the limits for the free tier are high enough that you probably wouldn&amp;rsquo;t hit them with a small team - 100 pulls every 6 hours per IP.&lt;/p&gt;
&lt;p&gt;Turns out you actually share a build pool with other users in amplify - which makes sense. But that in turn means that every so often your build pool will hit the limits for pulling containers from docker hub. And since there&amp;rsquo;s no way to set credentials for your pull.. you&amp;rsquo;re just kinda left hoping that if you retry things will work. There&amp;rsquo;s probably a large enough build pool that it works sometimes, but there are reports of it taking up to an hour or so.&lt;/p&gt;
&lt;p&gt;So you think: Oh yeah, no worries -&amp;gt; I&amp;rsquo;ll just set up ECR, and configure Amplify to grab my image from that repo instead. But ECR is a non-starter. It turns out that you can&amp;rsquo;t assign any kind of roles to amplify to allow authentication against an ECR.. so if you&amp;rsquo;re hosting your image in ECR, you have to make the entire repo publicly accessible.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using customized images unfortunately this is really the only way to go. You have to build and deploy to ECR and make the repo publicly available.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using pre-built images, amazon actually has their own public replica of popular docker images &lt;a href=&#34;https://gallery.ecr.aws/&#34;&gt;https://gallery.ecr.aws/&lt;/a&gt;. If you can find your image on there then you can reference it in the build params for your Amplify project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>You probably don&#39;t need NoSQL</title>
      <link>https://xangelo.ca/posts/you_dont_need_nosql.md/</link>
      <pubDate>Tue, 21 Nov 2023 23:29:09 -2900</pubDate>
      
      <guid>https://xangelo.ca/posts/you_dont_need_nosql.md/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CSS Banner</title>
      <link>https://xangelo.ca/posts/css_rl_banner/</link>
      <pubDate>Tue, 21 Nov 2023 23:12:49 -1200</pubDate>
      
      <guid>https://xangelo.ca/posts/css_rl_banner/</guid>
      <description>&lt;p&gt;&amp;gt;&amp;gt; As with all my posts, this will likely meander a bit. I&amp;rsquo;ve moved the meandering to the bottom if you care, and put the tutorial up top.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what we&amp;rsquo;re making:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../1700623990704-final-banner.png&#34; alt=&#34;Newly Uploaded Image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-html&#34;&gt;The HTML&lt;/h3&gt;
&lt;p&gt;the HTML for this is pretty boring so I&amp;rsquo;m just gonna show you: &lt;code&gt;&amp;amp;lt;div class=&amp;quot;city-title-wrapper&amp;quot;&amp;amp;gt;&amp;amp;lt;div class=&amp;quot;city-title&amp;quot;&amp;amp;gt;Windcross&amp;amp;lt;/div&amp;amp;gt;&amp;amp;lt;/div&amp;amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;meandering&#34;&gt;Meandering&lt;/h3&gt;
&lt;p&gt;I love CSS. I love it so much I never really bothered much with bootstrap or Tailwind for my personal projects.  I particularly love that CSS has caught up to my Photoshop Skills from the 2000s when sites like GreyCobra and 2Advanced were king. A long pain point in design (and one I think that really forced the move from the complexities in the early 2000s) was&amp;hellip; scaling!&lt;/p&gt;
&lt;p&gt;While HTML started out relatively simple.. the advent of flash in web design really catapulted things forward. We went from these &amp;ldquo;static&amp;rdquo; (everyone remembers blinking and spinning tags right?) websites to really interactive ones. I&amp;rsquo;m not talking &amp;ldquo;oh look there&amp;rsquo;s a chat box&amp;rdquo; I&amp;rsquo;m talking things flying around the screen, excellent sound effects when you clicked a site, and a web design renaissance that was squashed and obliterated by &amp;ldquo;Web 2.0&amp;rdquo;. &lt;/p&gt;
&lt;p&gt;We went from sites that looked truly unique and were works of art to what you&amp;rsquo;re seeing now.. but with hard gradients. There&amp;rsquo;s lots of reasons it went this way, and it would be truely foolish to foist the blame entirely on a single cause.&lt;/p&gt;
&lt;p&gt;The problem was CSS in it&amp;rsquo;s current form was mostly useless except for the most mudane things.&lt;/p&gt;
&lt;p&gt;The only way to get &amp;ldquo;nice&amp;rdquo; websites in CSS was to trawl the early days of alistapart.com and csszengarden for ideas. The other way was design your entire site in Photoshop - multiple resolutions be damned. If websites were supposed to be about freedom of expression I was going to express myself at a resolution of 1000x700 so that everything was pixel perfect. We used an umpteen number of nested tables to ensure that our designs were always perfect. &lt;/p&gt;
&lt;p&gt;The hardest thing we could do in these days was.. scaling our sites for other resolutions. Web 2.0 solved that problem by making designs boring and generic. When you look around and see every website look exactly the same, that&amp;rsquo;s because of Web2.0 and &amp;ldquo;the look&amp;rdquo; that it came with.&lt;/p&gt;
&lt;p&gt;It feels like we&amp;rsquo;re finally at the spot (technologically) that we can start making some of those early designs again - except this time with more of a focus on target-audience usability.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chrome HTTP Request stuck in &#34;Stalled&#34; State</title>
      <link>https://xangelo.ca/posts/chrome_request_stalled/</link>
      <pubDate>Tue, 20 Jun 2023 12:30:56 -3000</pubDate>
      
      <guid>https://xangelo.ca/posts/chrome_request_stalled/</guid>
      <description>&lt;p&gt;I got the chance to investigate a really odd bug where randomly network requests in Chrome would just hang. This would only occurr in our test environments at work and not in production. The request would hang for some long amount of time.. and then eventually complete successfully. The bug has been occurring for some time, but has been getting worse in Chrome. It got so bad that it was guaranteed that if you were using Chrome it was going to happen to you. Eventually it started happening in Firefox as well.. during an investor demo (what good is a demo if it doesn&amp;rsquo;t go up in flames?). That&amp;rsquo;s when I got roped in.&lt;/p&gt;
&lt;p&gt;The first thing I did was attempt to replicate it and capture a &lt;code&gt;.har&lt;/code&gt; file that I could share with anyone else that was interested. This part was easy - just popping open the network tab, navigating to the app on a test env, and then clicking every link that would trigger a network request. After about 30-40 seconds I had replicated the event&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/http2/wait-queue.png&#34; alt=&#34;Stuck Stalled&amp;hellip;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So we can clearly see here that the request took 2 minutes and the entirety of that time the connection was stuck in the &lt;code&gt;stalled&lt;/code&gt; state. That indicates one of two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Chrome never attempted to make the network request at all. Perhaps the priority on the request was dropped, maybe there were too many connections open to that FQDN already. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In some situations chrome actually merges the CORS preflight requests into what it reports as &lt;code&gt;stalled&lt;/code&gt;. So it&amp;rsquo;s possible that there was a problem in the preflight request that caused the delay before the actual request happened.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I did a bit more testing to figure out the scope of the issue. On/Off VPN with multiple browsers would all replicate the problem just fine. In this particular situation the fact that we could replicate it across EVERYTHING made it pretty clear that it was something related to our server.. but what? If the request never actually hits the server what could be going on?&lt;/p&gt;
&lt;h3 id=&#34;chrome-network-log&#34;&gt;Chrome Network Log&lt;/h3&gt;
&lt;p&gt;One tool that chrome has to diagnose networking issues is hidden away at &lt;code&gt;chrome://net-export&lt;/code&gt;. It generates a very VERY detailed log of everything network related that chrome is aware of. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/http2/net-export.png&#34; alt=&#34;Chrome Net Export&#34;&gt;&lt;/p&gt;
&lt;p&gt;I unchecked the &lt;code&gt;strip private information&lt;/code&gt; option and told it to include cookies + credentials and started logging it to disk. Then I swapped back to my tab and replicated the issue. Waited a few seconds, and then went back and ended the capture session.&lt;/p&gt;
&lt;p&gt;Once you get that capture file, you have to head over to &lt;a href=&#34;https://netlog-viewer.appspot.com&#34;&gt;https://netlog-viewer.appspot.com&lt;/a&gt; and import it. There&amp;rsquo;s a TON of information here, and honestly I didn&amp;rsquo;t even look at half of it. The only two things I cared about were the &amp;ldquo;Events&amp;rdquo; and &amp;ldquo;Timeline&amp;rdquo; sections. The Timeline really makes no sense until you have a idea of when your actual network event happened, so we can skip that and jump right over to Events&lt;/p&gt;
&lt;p&gt;There will likely be a lot of events. The &amp;ldquo;filter&amp;rdquo; at the top never worked for me given the sheer size of the events.. but scrolling through them all was just fine and eventually I found the URL request that caused the issue. If you click on the event it will display a bunch of debug information about the request. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/http2/event-169281.png&#34; alt=&#34;Event 168281&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see.. suddenly there&amp;rsquo;s a HUGE jump in time from &lt;code&gt;66807&lt;/code&gt; to &lt;code&gt;187631&lt;/code&gt;. We&amp;rsquo;ve confirmed now that this is a problem that&amp;rsquo;s occurring within the CORS preflight request specifically, and it&amp;rsquo;s just getting rolled into the &lt;code&gt;stalled&lt;/code&gt; state. The log viewer makes it trivial to dig down into the events and if you click on the details of the &lt;code&gt;HTTP_STREAM_JOB_CONTROLLER&lt;/code&gt; event you can see some more details. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/http2/event-169284.png&#34; alt=&#34;Event 169283&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here again, we see that there is a definitely delay when it attempts to call &lt;code&gt;HTTP_STREAM_REQUEST_STARTED_JOB&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/http2/event-169284.png&#34; alt=&#34;Event 169284&#34;&gt;&lt;/p&gt;
&lt;p&gt;And now we can easily see the problem: &lt;code&gt;SOCKET_POOL_STALLED_MAX_SOCKETS_PER_GROUP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In HTTP1.1 each tab in your browser is configured to only make a certain number of requests per FQDN at the same time.This is one of the reasons why we load &amp;ldquo;static assets&amp;rdquo; on a different subdomain. By loading static assets on a separate FQDN we can increase the objects that are simultaneously loaded in our tab providing a better experience (for some definition of experience) to our user. In HTTP2, this restriction is across every single tab in your browser. For chrome, it can only instantiate 6 concurrent connections to an FQDN. This is because your connections are persistent in http2 and you don&amp;rsquo;t need to deal with the initialization handshakes on every request. The connection, once opened, is continually reused. &lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-family: sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal;&#34;&gt;For some reason, the socket pool dedicated to this particular FQDN gets filled up and so it can&amp;rsquo;t actually make the next request. So it just sits there.. until suddenly a socket is available (2 minutes later) and it is able to complete the rest of the request as expected. The &amp;ldquo;suddenly&amp;rdquo; is likely due to the default socket timeout. Once that timeout is hit, Chrome kills the connection and opens a new one and suddenly our request works again.&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;We can dig even further! Since we know that this is happening on an HTTP2 call, we can filter our events to only show us the http2 connections and that paints a more serious picture! &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/http2/goaway.png&#34; alt=&#34;GOAWAY&#34;&gt;&lt;/p&gt;
&lt;p&gt;Every one of our http2 sockets is getting sent a &lt;code&gt;GOAWAY&lt;/code&gt; frame by the server.. but notice that it says &lt;code&gt;NO_ERROR&lt;/code&gt;. This generally indicates that the server is telling the client that it will be shutting down this socket and. The &lt;code&gt;GOAWAY&lt;/code&gt; frame also tells the client what the last stream that it processed was. This is so that the client can resend any data that it needs to on a new connection. What should happen is that after this frame, the connection is ended by both parties and we move on to a new one. In practice, it happens after a following &lt;code&gt;GOAWAY&lt;/code&gt; frame that indicates the connection is now dead. Except that final disconnect frame is never sent. So as far as chrome is concerned, we&amp;rsquo;re still happily connected so it returns the connection to the pool. But the server has disconnected.&lt;/p&gt;
&lt;p&gt;So it just sits there trying to use the connection again, times out, and then closes and opens a new connection! And so we tracked down the mysterious slow-down and also used some cool tools in the process! &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;One thing I do want to note: This seems like a really straight forward problem - but that&amp;rsquo;s just in hindsight. In the moment there&amp;rsquo;s lots of googling and staring off into space trying to remember obscure keywords. I have a really bad memory, and so one of the things I do is memorize keywords/ideas rather than content because there&amp;rsquo;s just too much to remember. In this way I can ensure that I can find the pieces of information I need when I need to. In this case the keys things were:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;chrome has some kind of detailed network log&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;browsers like to fold CORS requests into the main request for reporting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http2 has a max connection limit across your browser&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rest of the information used is all derivable from those keys and a search engine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Started from *Free* now we&#39;re here</title>
      <link>https://xangelo.ca/posts/free_software_mtx/</link>
      <pubDate>Mon, 19 Jun 2023 06:12:47 -1200</pubDate>
      
      <guid>https://xangelo.ca/posts/free_software_mtx/</guid>
      <description>&lt;p&gt;Neopets was the first time I&amp;rsquo;d ever heard about HTML or CSS. I had been playing terrible games for a long time at this point, even digging into basic at one point to try and do something.. but I didn&amp;rsquo;t have the interest at the time. I didn&amp;rsquo;t have anyone in my (or my parents) circle that was interested in computers at the time, so I never even considered what was possible. Neopets was a free game where you took care of a digital pet and then played a ton of games to earn in-game money. They even had a huge &amp;ldquo;Auction house&amp;rdquo; that was made up of individual stores that users ran. You could start a store, and set up your own items for sale. It was amazing. It also gave you a little area to enter HTML/CSS snippets so you could customize your store. That was why I bothered learning HTML/CSS at all. To customize my neopets store. They had the same interface for your clan page - customize your entire clan page with HTML and CSS. It was amazing. It was the first time anything related to &amp;ldquo;programming&amp;rdquo; clicked and I realized I loved it. &lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t remember a single ad on neopet trying to force me to make a purchase of a premium currency. There probably were.. but I don&amp;rsquo;t remember them at all.&lt;/p&gt;
&lt;p&gt;After learning HTML/CSS and offering my services to other neopets players in exchange for ingame goods.. I grew out of what neopets offered. In that time I discovered geocities and it DHTML. I loved it. I grew out of that too when I started digging into PHP and started looking around for free shared hosting. There were a lot of hosting companies at the time.&lt;/p&gt;
&lt;p&gt;One in particular, Host Matrix, caught my attention - because I love the Matrix. They were having a promotion where if you wrote long form tutorials for them (around HTML/CSS/PHP) you could get free hosting! And so I did. I wrote a lot of tutorials so that I could get free hosting and continue into this weird world I had stumbled in to.&lt;/p&gt;
&lt;p&gt;Around the same time I picked up the guitar. My dad had played the guitar since his teens, and so there was always one around. I had never shown an interest in it.. but one day I picked it up and started learning how to play. Mostly because of tabs (tabulature) - a fingering based musical notation that works beautifully for the guitar. People, on the internet, would listen to songs, figure out what they were playing.. and then write it down and put it on the internet.. for free! I devoured everything I could find. Eventually I got good enough that I could write my own tabs and share with others! It was incredible. &lt;/p&gt;
&lt;p&gt;When I started branching out musically.. it was because of free access to it. The first time I had heard Ravenous by &lt;a href=&#34;https://archenemy.net/en/&#34;&gt;Arch Enemy&lt;/a&gt; my mind was blown - I ran home and downloaded the song. I listened to it every day for a week and then started learning it. When I discovered Children of Bodom and Kalmah it was the same thing. Obscure bands that I would never have had the hope of finding out, accessible to me because it was free.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t get me wrong, I understand there were costs to creating this. I&amp;rsquo;ve spent the last decade of my life building SaaS software for companies and managing infra budgets. I understand the cost. But also, I understand that I wasn&amp;rsquo;t a customer. Arch Enemy didn&amp;rsquo;t lose money by having me download their album. I didn&amp;rsquo;t have access to purchase their album and I didn&amp;rsquo;t have the money to do it. Arch Enemy gained a fan that would later on buy tickets to shows, and albums, and t-shirts. A fan that would have never bothered if he hadn&amp;rsquo;t heard their albums for free.&lt;/p&gt;
&lt;p&gt;Free played a huge role in my life and I&amp;rsquo;ve always loved it. I donate a few hours every week to local startups that need technical advice. I hang out in slack groups answering questions. I hang out in Magic discord groups answering questions. I write software and give it away for free. I do it because I owe so much to free. &lt;/p&gt;
&lt;p&gt;And now I sit here trying to figure out monetization strategies for my projects.. and I don&amp;rsquo;t like it. I wish I could do it for free, but there are costs associated with it that I know I won&amp;rsquo;t be able to subsidize forever. I know I want as much of it to be free as possible. I don&amp;rsquo;t want people to feel like they need to pay, I want them to want to. So I have to think about the best way to monetize &lt;a href=&#34;https://www.risinglegends.net&#34;&gt;Rising Legends&lt;/a&gt; that are in line with my philosophies&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Redis Job Queue</title>
      <link>https://xangelo.ca/posts/simple_redis_queue/</link>
      <pubDate>Thu, 25 May 2023 00:15:53 -1500</pubDate>
      
      <guid>https://xangelo.ca/posts/simple_redis_queue/</guid>
      <description>&lt;p&gt;A common pattern in most software projects is the &amp;ldquo;queue&amp;rdquo;. You&amp;rsquo;ll throw some stuff on there and eventually get around to sorting it all out. In some cases, you may not even really care about that.&lt;/p&gt;
&lt;p&gt;I recent ran into a situation in node.js where I needed to offload some CPU intensive out of the main http request handling process. Originally I thought about just forking the process, but I due to the fact that this endpoint is public facing (albeit authenticated and paid for), I was wary. Instead I figured I&amp;rsquo;d rope in a quick job queue.&lt;/p&gt;
&lt;h3 id=&#34;caveats&#34;&gt;Caveats:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The jobs have an easy &amp;ldquo;deduplication key&amp;rdquo;. An ID that is the same given the same inputs.&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we don&amp;rsquo;t complete a job for any reason, that&amp;rsquo;s fine, another one will likely show up again in a few minutes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We were also using redis so here&amp;rsquo;s a real simple pattern that can handle this kind of workload.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Whenever we get a new job we calculate its deduplication ID. We&amp;rsquo;ll call this the &lt;code&gt;jobId&lt;/code&gt; moving forward.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We call &lt;code&gt;set job:[jobId] value NX EX 10&lt;/code&gt;. This sets the key &lt;code&gt;job:[jobId]&lt;/code&gt; to some value we provide only if the key does not already exist. It also sets a 10s expiration time. We&amp;rsquo;re using &lt;code&gt;NX&lt;/code&gt; to provide some additional deduplication and we&amp;rsquo;re using &lt;code&gt;EX&lt;/code&gt; to ensure that if for some reason our job doesn&amp;rsquo;t complete in 10s.. just allow another job to be inserted with the same key. You can tune &lt;code&gt;EX&lt;/code&gt; as necessary, or leave it off entirely if you never want this job re-processed again until you flush your cache.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use &lt;code&gt;rpush [queueName] [jobId]&lt;/code&gt; to add the job Id to the list of jobs that need to be processed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we have any additional information about the job we want to pass on, we can use &lt;code&gt;hset jobDetails:[jobId] k1 v1 k2 v2...&lt;/code&gt; and store it in there.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your &amp;ldquo;worker&amp;rdquo; is just a process that runs &lt;code&gt;lrange [queueName] 0 0&lt;/code&gt;. That will retrieve the oldest &lt;code&gt;jobId&lt;/code&gt; in your queue. You can grab any further information from the &lt;code&gt;jobDetails:[jobId]&lt;/code&gt; hash set and do whatever work you need. When you&amp;rsquo;re done you can call &lt;code&gt;ltrim [queueName] 0 0&lt;/code&gt; which will remove the job from the queue. &lt;/p&gt;
&lt;p&gt;An interesting fact about this setup is that all your calls are &lt;code&gt;O(1)&lt;/code&gt; and you can pipeline the initial &lt;code&gt;set&lt;/code&gt;/&lt;code&gt;rpush&lt;/code&gt;/&lt;code&gt;hset&lt;/code&gt; calls so that things are even faster. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Now Powered by Outlines</title>
      <link>https://xangelo.ca/posts/outliner_blog_update/</link>
      <pubDate>Sun, 21 May 2023 23:29:45 -2900</pubDate>
      
      <guid>https://xangelo.ca/posts/outliner_blog_update/</guid>
      <description>&lt;p&gt;One of the things that I do every so often is completely re-write the backend of my blog. I&amp;rsquo;ve mostly hit upon a UI that I like, but I&amp;rsquo;ve swapped out the backend over the years between various custom iterations, wordpress, ghost, and now finally Hugo. This time, I&amp;rsquo;ve swapped out how I write my blog posts - but kept everything else the same.&lt;/p&gt;
&lt;p&gt;The current system allows me to write markdown in vim. I&amp;rsquo;m normally running &lt;code&gt;hugo serve -w&lt;/code&gt; at the same time so I can watch the rendered version of what I&amp;rsquo;m doing as I go. It&amp;rsquo;s sort of like a hacked-together live preview. It works well enough.&lt;/p&gt;
&lt;p&gt;However, for the last 10 years (maybe more?) I&amp;rsquo;ve been a huge fan of outliners. I original started with various projects by &lt;a href=&#34;https://scripting.com&#34;&gt;Dave Winer&lt;/a&gt; and I used almost everything he&amp;rsquo;s written around them for a number of years. I&amp;rsquo;ve also tried tooling like &lt;a href=&#34;https://workflowy.com&#34;&gt;Workflowy&lt;/a&gt; and almost every other infinite-bullet-list tool that came after them. They were all.. fine? I had no real problems with them except that they never really stuck around for very long. They were in a tab in my browser, and my browser has like 100 tabs open at any given time. &lt;/p&gt;
&lt;p&gt;For the last 6 months or so, however, I&amp;rsquo;ve been working on my own outliner. It started as an in-browser tool&amp;hellip; and I quickly moved it to an offline-first desktop app via &lt;a href=&#34;https://tauri.app&#34;&gt;Tauri&lt;/a&gt;. Having it offline first meant a few big things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All the syncing tools just work. Dropbox, rsync, backblaze, s3 as a filesystem. Whatever. It works. All nodes in the outliner are individual json files on your computer. There&amp;rsquo;s an &amp;ldquo;outline&amp;rdquo; file that stitches the nodes together into a tree.  &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building desktop first allowed me to bypass the need for user accounts and passwords. It allowed me to skip out on the complexities of providing reliable encrypted storage to users. I don&amp;rsquo;t need to run a collection of servers and databases and object stores to power this thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since I use this tool across operating systems all day long it slowly ended up being where most of my thoughts for blog ideas end up. And so what I hope to be the final feature of this project was realized: I&amp;rsquo;d love to be able to write my whole blog post in here, and then hit a button to have it publish to my hugo deploy.&lt;/p&gt;
&lt;p&gt;This first iteration uses a lot of hard-coded stuff.. and I&amp;rsquo;ll probably take some time to iron out some of the edge cases around rendering.. but it honestly came together pretty quickly. Since every node in the outliner is markdown it was trivial to put it together. As of right now, I can write my blog post in my outliner, press &lt;code&gt;shift+p&lt;/code&gt; and have it write out a markdown file to my local hugo instance.&lt;/p&gt;
&lt;p&gt;For now, I do some manual reviewing before officially publishing it. For now there&amp;rsquo;s a few more usability things that need to be added like &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;differentiating which posts are published vs. un-published&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;being able to &amp;lsquo;unpublish&amp;rsquo; a node&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But honestly? I&amp;rsquo;m kind of enjoying this right now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designing On-Call</title>
      <link>https://xangelo.ca/posts/on-call/</link>
      <pubDate>Wed, 21 Sep 2022 22:36:23 -3600</pubDate>
      
      <guid>https://xangelo.ca/posts/on-call/</guid>
      <description>&lt;p&gt;On-call is one of those things that all developers end up doing at some point. My goal isn&amp;rsquo;t to discuss the merit of on-call, but rather what the point of on-call is and how to go about designing what “on-call” means at your company. I&amp;rsquo;m going to start at the very beginning because chances are you&amp;rsquo;re already doing it wrong. I should also note that I&amp;rsquo;m looking at this specifically from a SaaS point of view.&lt;/p&gt;
&lt;h2 id=&#34;why-do-devs-go-on-call&#34;&gt;Why do devs go on-call?&lt;/h2&gt;
&lt;p&gt;The point of on-call is simple: People use your app 24/7 relative to you. They may be using it from Italy or Australia or Thailand while you&amp;rsquo;re tucked up in bed in Wisconsin. But for them, it&amp;rsquo;s working hours and they expect your site to be available. But, of course, that&amp;rsquo;s not always possible. Things happen that will inevitably take your project down. In these situations &amp;ldquo;on-call&amp;rdquo; is vital for several reasons: The least of which is solving the problem.&lt;/p&gt;
&lt;p&gt;Normally you go on-call because your founders or manager or a customer noticed that your service was offline when it wasn&amp;rsquo;t supposed to be. People start complaining, it makes some rounds internally, and then eventually ends up at the desks of whoever deployed it. Often that ends up being some kind of &amp;ldquo;infrastructure&amp;rdquo; team (You probably call them DevOps or SREs - why that&amp;rsquo;s wrong is an issue for another time). These folk hear about it, fix the problem, and then go about setting up some alerts to let them know when the issue happens again. Bam, you&amp;rsquo;ve just enabled on-call without any of the good parts. You can all but guarantee that your on-call team is going to end up angry and upset about on-call which will manifest in the worst ways possible.&lt;/p&gt;
&lt;h2 id=&#34;lets-walk-through-the-standard-on-call-process&#34;&gt;Let&amp;rsquo;s walk through the standard on-call process&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s walk through a very high-level on-call process and then we can break it down.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Something breaks&lt;/li&gt;
&lt;li&gt;You find out that something is broken&lt;/li&gt;
&lt;li&gt;You bash at your keyboard until it works again&lt;/li&gt;
&lt;li&gt;You put in some metrics so that if &amp;ldquo;thing&amp;rdquo; happens again, you&amp;rsquo;ll know&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&amp;rsquo;s wrong.&lt;/p&gt;
&lt;p&gt;Ok, it&amp;rsquo;s not wrong - it&amp;rsquo;s just a subset of what &amp;ldquo;on-call&amp;rdquo; really is.&lt;/p&gt;
&lt;p&gt;See the thing that you&amp;rsquo;re REALLY missing is that nowhere in this process have you actually figured out what&amp;rsquo;s going on. Sure you solved a symptom - maybe that symptom is synonymous with the cause. But you don&amp;rsquo;t know, because your process doesn&amp;rsquo;t encompass that.&lt;/p&gt;
&lt;p&gt;To have a good on-call process you have to understand a fundamental truth of on-call: on-call isn&amp;rsquo;t just about engineering. on-call is the culmination of a bunch of different business, product, and culture decisions.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the truth of each step in your process&lt;/p&gt;
&lt;h3 id=&#34;something-breaks&#34;&gt;Something breaks&lt;/h3&gt;
&lt;h4 id=&#34;something&#34;&gt;Something&lt;/h4&gt;
&lt;p&gt;The first thing we need to define is what &amp;ldquo;something&amp;rdquo; is. The easiest thing to do is to take a look at your code repositories. If you’ve broken things down into services, you likely have one repo/service. That’s an easy way to define the boundaries of “something”. But it’s also probably wrong.&lt;/p&gt;
&lt;p&gt;If you have a monolithic codebase in a single repository this is a much harder step for you, and you’ll probably do a better job.&lt;/p&gt;
&lt;p&gt;It’s very easy to define “something” by engineering components - but this isn’t always answering “what” broke, but “how” and “why”. A user doesn’t care that your lambda was opening too many connections to RDS causing a spike in memory which caused your API to lag. They care that they weren’t able to send a cat picture.&lt;/p&gt;
&lt;p&gt;When defining your “something” start with user flows. Look at your application and define “core” actions that your user can take. From there, simplify until you have a handful of actions that you want a user to be able to do All the Time.&lt;/p&gt;
&lt;h4 id=&#34;broke&#34;&gt;Broke&lt;/h4&gt;
&lt;p&gt;Defining the &amp;ldquo;something&amp;rdquo; is relatively easy compared to defining &amp;ldquo;broken&amp;rdquo;. We know a thing is broken if it&amp;rsquo;s not starting, but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if it works but 1% of the requests are resulting in an error?&lt;/li&gt;
&lt;li&gt;What if it works but 1% of the time it crashes and restarts?&lt;/li&gt;
&lt;li&gt;What if it works but is very slow?&lt;/li&gt;
&lt;li&gt;What if it works, is not slow, and doesn&amp;rsquo;t crash, but your API docs don&amp;rsquo;t match what the endpoint is returning?&lt;/li&gt;
&lt;li&gt;What if it works, but your database is being crushed by a sudden increase in traffic?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Defining our “something” first is important because it helps us to set bounds on what we consider “broke” and what is “degraded” and what is “fine”.&lt;/p&gt;
&lt;p&gt;Perhaps we don&amp;rsquo;t care if 1% of requests fail.. maybe we don&amp;rsquo;t care if 0.1% of requests fail. Defining these thresholds is tough because it requires realistically looking at our application and deciding what is &amp;ldquo;acceptable&amp;rdquo; and what is not. Sometimes we have to make difficult choices here. Maybe we want 0.1% to be considered broken.. but actually, 1% is broken. This is where we impact your actual application.&lt;/p&gt;
&lt;p&gt;Deciding 0.1% of errors is &amp;ldquo;broken&amp;rdquo; where your application is currently sitting at 1% may seem like a good thing. 0.1% is where we want to be and so letting devs know when that isn&amp;rsquo;t the case is good. We can work toward 0.1%. But this involves much larger product considerations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When these alerts happen overnight - are devs tasked with a complete resolution during work hours?&lt;/li&gt;
&lt;li&gt;Does that mean feature work will suffer?&lt;/li&gt;
&lt;li&gt;How will you buffer your sprint to make time for these interruptions?&lt;/li&gt;
&lt;li&gt;Do you have the ability to buffer your sprint given product launch dates?&lt;/li&gt;
&lt;li&gt;What happens when a dev is up all night dealing with issues, do they take the next day off?&lt;/li&gt;
&lt;li&gt;Do you offload the task to a different team (Ops/Infra/SRE) since feature work is so important?&lt;/li&gt;
&lt;li&gt;What happens when those teams get burnt out and leave?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the flip side setting your alerts at 1% is accepting that this is the current state.. but now it becomes a decision on whether or not a 0.1% error rate is more important than the next feature you&amp;rsquo;re supposed to get out.&lt;/p&gt;
&lt;p&gt;Defining the state of &amp;ldquo;broken&amp;rdquo; is hard because it is the intersection of the current and future state of our application, while simultaneously being the fulcrum that will help tip the scales between &amp;ldquo;acceptable&amp;rdquo; and &amp;ldquo;unacceptable&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s no right answer here - just an answer for your team, for right now. Whatever you decide today, the most important thing is that you re-evaluate it and allow those that are on-call to provide feedback on if this was a reasonable level of &amp;ldquo;broken&amp;rdquo;.&lt;/p&gt;
&lt;h4 id=&#34;service-level-objectives&#34;&gt;Service Level Objectives&lt;/h4&gt;
&lt;p&gt;By defining what broken means you&amp;rsquo;ve now set a baseline stat for your systems. You&amp;rsquo;ve defined your first Service Level Objective (SLO). Yay!&lt;/p&gt;
&lt;p&gt;In the nutshell, SLOs form the baseline for your Service Level Agreements (SLA) with customers. Your SLA can&amp;rsquo;t be better than your SLO or you&amp;rsquo;re going to have to sacrifice on feature development to bring them up to speed. Now we can talk about all kinds of marketing tricks you can do (mainly playing with the measurement period) but the truth is if your SLO defines a particular flow as &amp;ldquo;broken&amp;rdquo; it sets the floor for your SLA. You can only promise less than that until you invest in improving that SLO.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s move on to the 2&lt;sup&gt;nd&lt;/sup&gt; step.&lt;/p&gt;
&lt;h3 id=&#34;you-find-out-that-something-is-broken&#34;&gt;You find out that something is broken&lt;/h3&gt;
&lt;h4 id=&#34;whats-on-first&#34;&gt;What&amp;rsquo;s on first?&lt;/h4&gt;
&lt;p&gt;Ok. something is definitely broken. How do you find out?&lt;/p&gt;
&lt;p&gt;This is probably the most technically straightforward piece, but the one that has the most impact on people.&lt;/p&gt;
&lt;p&gt;When something is broken, an alert is generated you get notified.&lt;/p&gt;
&lt;p&gt;The first step is figuring out how you get data out of your system into a place that can perform some analysis and generate these alerts. The two big products here are Datadog and NewRelic. These are all-in-one solutions that allow you to instrument your application and gather metrics+logs+events and put them somewhere you can visualize them. These systems also allow you to create “alerts” that get generated based on the data you’ve been feeding it.&lt;/p&gt;
&lt;p&gt;Given that you now know what you consider critical user flows your goal is to go through your application and ensure that everything that supports these flows is properly instrumented. This is where we start looking at the different infrastructure components. This is where we learn how/why our system broke. This is an important step - it&amp;rsquo;s easy to think that devs should just &amp;ldquo;go through and instrument everything&amp;rdquo;, but that makes things harder to reason about. You&amp;rsquo;re increasing your &amp;ldquo;noise&amp;rdquo; and when you&amp;rsquo;re looking at a Signal vs. Noise ratio, you want to keep your noise to a minimum.&lt;/p&gt;
&lt;p&gt;Take a look at your SLOs -&amp;gt; and then define your Service Level Indicators (SLI).&lt;/p&gt;
&lt;h4 id=&#34;service-level-indicators&#34;&gt;Service Level Indicators&lt;/h4&gt;
&lt;p&gt;These are the metrics that you can look at to identify that you&amp;rsquo;re meeting your SLOs. They&amp;rsquo;re often aggregate metrics. If your objective is a 1% error rate, your SLI will likely ensure that you are getting an accurate count of errors vs. successful requests across your system. That will involve you going through various systems and making sure that your code base is sending appropriate logs. It&amp;rsquo;ll also be going through your monitoring tooling and creating dashboards/alerts so you can view your SLI and all the subcomponents that make up your SLI easily.&lt;/p&gt;
&lt;p&gt;Now that we have these metrics, and we know what we consider “broken” we can tune our alarms. When one of these components is in a state that impacts our user flow - thats an alert.&lt;/p&gt;
&lt;p&gt;That alert is going to be sent to whomever is on-call.&lt;/p&gt;
&lt;h4 id=&#34;whos-on-first&#34;&gt;Who’s on first?&lt;/h4&gt;
&lt;p&gt;Everyone in Engineering that is responsible for writing code that could end up affecting a user.&lt;/p&gt;
&lt;p&gt;Bam. Easiest decision ever.&lt;/p&gt;
&lt;p&gt;But you&amp;rsquo;ll likely face some pushback from teams that don&amp;rsquo;t normally see themselves as &amp;ldquo;needing to be in rotation&amp;rdquo;. Doesn&amp;rsquo;t matter - at some point you have to make a decision and this is one hill you must die on as a manager.&lt;/p&gt;
&lt;p&gt;Traditionally on-call was reserved for infrastructure/devops/sre groups and developers weren&amp;rsquo;t required to be on-call. This is a silly separation of concerns. The people who wrote the code that likely resulted in user impacts are often not from your infrastructure/platform team -&amp;gt; they&amp;rsquo;re likely from the application team. This should be your first tier of on-call when thinking about SLOs from the product.&lt;/p&gt;
&lt;p&gt;Often you&amp;rsquo;ll end up with a rotation of engineers, probably daily, with multiple tiers.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The primary: They&amp;rsquo;re the first ones to get alerted about an issue&lt;/li&gt;
&lt;li&gt;The secondary: If alerts to the primary don&amp;rsquo;t get acknowledged, it goes to this person&lt;/li&gt;
&lt;li&gt;The backup: If primary AND secondary are not responding -&amp;gt; this person is here.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You may decide to have different schedules for weekdays/weekends but in the end the goal is to cycle through all developers without making it feel like anyones &amp;ldquo;job&amp;rdquo; is to be on-call.&lt;/p&gt;
&lt;p&gt;Now that you have your schedule, you must know that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Everyone should feel empowered to schedule alternates if they&amp;rsquo;re busy. If I&amp;rsquo;m scheduled tomorrow night and something comes up - I should feel comfortable addressing the engineering team as a whole and asking someone to trade with me. Likewise, you should feel comfortable saying no.&lt;/li&gt;
&lt;li&gt;No one should treat on-call as being stuck at the computer. This does end up personal preference for engineers, but if you&amp;rsquo;re on-call you should be able to take your laptop/phone with you where you go. If your company is not technically ready for this, then you better be compensating your employees well for tying them to their homes outside of work hours.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;you-bash-at-your-keyboard-until-it-works-again&#34;&gt;You bash at your keyboard until it works again&lt;/h3&gt;
&lt;p&gt;Alright. It&amp;rsquo;s 3 am, something broke, you were paged. You hop on your computer, bleary-eyed and upset because it&amp;rsquo;s chillier than you expected because you forgot your pants in the rush to deal with this situation.&lt;/p&gt;
&lt;p&gt;Relax.&lt;/p&gt;
&lt;p&gt;Your job is not to solve the problem - your job is to ensure that your application is performing as expected.&lt;/p&gt;
&lt;p&gt;Solving the problem is a task that is best left to those on full nights of sleep. When it&amp;rsquo;s 3 am and you finally manage to log into your laptop, &amp;ldquo;solving&amp;rdquo; the problem should be the furthest thing from your mind. The goal is to mitigate the outage and restore acceptable functionality based on your SLOs.&lt;/p&gt;
&lt;p&gt;In some cases simply restarting a process is enough to get things back to working. Sometimes you may need to upsize a database.&lt;/p&gt;
&lt;p&gt;What you should NOT be required to do, is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;figure out where your application code is crashing&lt;/li&gt;
&lt;li&gt;optimize that weird nested join that you&amp;rsquo;re supposed to tackle next sprint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your job at 3 am is problem mitigation. Maybe nothing can be done except throw on a status message so that users know what&amp;rsquo;s happening.&lt;/p&gt;
&lt;p&gt;Perhaps this alert is fine, this level of error is acceptable.. so you can just adjust your alerting and call it a night.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t attempt to be smart at 3 am because when you get paged at 6 am you&amp;rsquo;ll be much worse off trying to decipher what you did.&lt;/p&gt;
&lt;p&gt;This is often where we run into issues. Engineers like to solve problems. When we get an alert we dig in. We want to fully understand what&amp;rsquo;s happening because we can easily over/under complicate an issue. Oh is CPU on the DB at 100%? Do we need to just upsize the database? Are we locking something? Is there some periodic system running?&lt;/p&gt;
&lt;p&gt;Sometimes the problem is obvious and fixing the symptom is the same as fixing the problem. It&amp;rsquo;s much harder when the problem isn&amp;rsquo;t obvious. Rememeber that while you&amp;rsquo;re &amp;ldquo;digging in&amp;rdquo; this is impacting users - otherwise it wouldn&amp;rsquo;t be alerting you right? As unnatural and silly as it seems, at 3 am -&amp;gt; solve the symptom for immediate relief. Then when you&amp;rsquo;re not stressed, solve the problem.&lt;/p&gt;
&lt;p&gt;Again: Solving the problem at 3 am is not your job.&lt;/p&gt;
&lt;p&gt;Once you fix the symptom causing the alert and verify that things are working again - leave notes in a public place. Explain what you did and why. The why is the most important part. This is that when you or whomever else logs in the following day and looks over what happened &amp;ldquo;on-call&amp;rdquo; you can easily decipher your thought process and areas that you should begin looking to resolve the underlying problem.&lt;/p&gt;
&lt;h3 id=&#34;you-put-in-some-metrics-so-that-if-thing-happens-again-youll-know&#34;&gt;You put in some metrics so that if &amp;ldquo;thing&amp;rdquo; happens again, you&amp;rsquo;ll know&lt;/h3&gt;
&lt;p&gt;This is the easiest part: Once you identify the &amp;ldquo;root cause&amp;rdquo; of your problem, get some metrics/logs in place so that you know. Don&amp;rsquo;t forget to include the metric in any SLI calculations that you might need.&lt;/p&gt;
&lt;h2 id=&#34;compensation&#34;&gt;Compensation&lt;/h2&gt;
&lt;p&gt;Your propensity for compensation is entirely dependent on your org and the legalities of where you reside. In some situations you will have to pay engineers overtime for on-call. In some you can get away it.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t be a jerk.&lt;/p&gt;
&lt;p&gt;Whatever you decide to do understand that your team will leave if they think they&amp;rsquo;re getting a bad deal. on-call is requesting something of your team outside of normal working hours. It doesn&amp;rsquo;t matter if you put it in a contract, it doesn&amp;rsquo;t matter if it was on the job description. You are requesting something of your team that is above their work day.&lt;/p&gt;
&lt;p&gt;If an on-call night was rough, let them take the following day off. If they&amp;rsquo;ve been having a bad week personally, remind them that its&amp;rsquo; ok if they want to move their on-call.&lt;/p&gt;
&lt;h2 id=&#34;your-on-call-process&#34;&gt;Your On-Call Process&lt;/h2&gt;
&lt;p&gt;Finally, you&amp;rsquo;ve ready all that and are ready to implement a real &amp;ldquo;on-call&amp;rdquo; process. Here&amp;rsquo;s what it should look like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify your SLOs&lt;/li&gt;
&lt;li&gt;Identify your SLIs&lt;/li&gt;
&lt;li&gt;Work to track metrics/logs that relate to your SLIs&lt;/li&gt;
&lt;li&gt;Create an on-call rotation&lt;/li&gt;
&lt;li&gt;Something breaks&lt;/li&gt;
&lt;li&gt;You find out that something is broken&lt;/li&gt;
&lt;li&gt;You mitigate the problem&lt;/li&gt;
&lt;li&gt;You put in some metrics so that if &amp;ldquo;thing&amp;rdquo; happens again, you&amp;rsquo;ll know&lt;/li&gt;
&lt;li&gt;You revisit the alert the morning after to figure out root cause&lt;/li&gt;
&lt;li&gt;You resolve the actual problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;your-on-call-process-in-practice&#34;&gt;Your On-Call Process in Practice&lt;/h2&gt;
&lt;p&gt;The truth is, there&amp;rsquo;s a huge difference from the &amp;ldquo;ideal&amp;rdquo; process and what you end up with in practice. So much of this is up to the people involved and the culture of the workplace. Chances are you already have some of this implemented and it kinda works for you mostly.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s ok.&lt;/p&gt;
&lt;p&gt;The goal here is that you understand ideal, and you understand where you are. And now you have the information to be able to make trade-offs. Expending your entire development capital on the first 3 items on this process before getting to the next is silly.&lt;/p&gt;
&lt;p&gt;Instead this process is more of a &amp;ldquo;Flow&amp;rdquo;. If you understand ther flow, you can understand how each thing feeds into the next. When you know that you can better break down your approach.&lt;/p&gt;
&lt;p&gt;You probably have Service Level Agreements (SLAs) with your customers. And you likely have some rough SLOs/SLIs that track that. Solidify them. Make them available to the team on demand and make sure that they&amp;rsquo;re accurate.&lt;/p&gt;
&lt;p&gt;The on-call process is a larger movement within your engineering organization that pushes the whole team toward excellence: Both technical in being able to understand the inner-workings of your application and all the components, but also of your product. If your SLAs are at 99% uptime, but you&amp;rsquo;re sitting at 99.9% uptime -&amp;gt; that&amp;rsquo;s an excellent way to upsell. Likewise, if your uptime is actually at 98% you now know exactly the area your team will need to focus on next.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Understand that no matter your best efforts, pages will be missed. Bugs will go undetected. Users will be upset. But these are short-term issues. You can fix bugs. You can explain to users. You can tell your devs that this push is temporary.&lt;/p&gt;
&lt;p&gt;Do understand the difference between pages being missed and pages being ignored - call your team out on it however you need. Missing a page isn&amp;rsquo;t just letting customers down, it&amp;rsquo;s letting your team down. If it happens frequently enough the team will either think that the alert isn&amp;rsquo;t important or that an individual is above the on-call rotation. It&amp;rsquo;ll foster all kinds of interpersonal problems.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t treat on-call as the solution to your stability and reliability issues. Reacting is not being proactive. When alerts happen overnight, ensure that there is SOME mechanism to address the root cause reasonably.&lt;/p&gt;
&lt;p&gt;If you are running into issues with this, reach out - I&amp;rsquo;d love to chat. I&amp;rsquo;ve been doing this for a long time and I love to help out. I set aside a few hours a week to donate to help companies and individuals make sense of these kinds of larger scale engineering problems. My email is at the bottom of every page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mongo vs. DynamoDB</title>
      <link>https://xangelo.ca/posts/mongo-ux/</link>
      <pubDate>Sat, 17 Sep 2022 02:12:13 -1200</pubDate>
      
      <guid>https://xangelo.ca/posts/mongo-ux/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Whenever you get into the conversation of NoSQL, and specifically &amp;ldquo;Document based&amp;rdquo; systems, you inevitably seem to end up on either DynamoDB or Mongo. The truth is while DynamoDB is a wonderful tool, Mongo should probably be your first stop.&lt;/p&gt;
&lt;h2 id=&#34;mongo-vs-dynamodb&#34;&gt;Mongo vs. DynamoDB&lt;/h2&gt;
&lt;p&gt;Mongo and DynamoDB are two document storage databases in the NoSQL family. Where mongo took the more traditional &amp;ldquo;server&amp;rdquo; route, DynamoDB opted for &amp;ldquo;serverless&amp;rdquo;. As a result, most of the distinction between the two comes from this divide.&lt;/p&gt;
&lt;h3 id=&#34;the-infrastructure-and-scaling&#34;&gt;The infrastructure and Scaling&lt;/h3&gt;
&lt;h3 id=&#34;the-ux&#34;&gt;The UX&lt;/h3&gt;
&lt;h3 id=&#34;support&#34;&gt;Support&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Removing the Default Font</title>
      <link>https://xangelo.ca/posts/default-font/</link>
      <pubDate>Thu, 31 Mar 2022 00:07:57 -0700</pubDate>
      
      <guid>https://xangelo.ca/posts/default-font/</guid>
      <description>&lt;p&gt;This is a small change that I&amp;rsquo;ve made to the site that I&amp;rsquo;ve actually been thinking about for quite some time. I&amp;rsquo;ve always had a monospaced font configured in my CSS, forcing all text into whatever the default monospace font on your system is.&lt;/p&gt;
&lt;p&gt;Personally I like monospaced fonts - but then again, I spend a lot of my time looking at them so it&amp;rsquo;s only inevitable.&lt;/p&gt;
&lt;p&gt;However, monospaced fonts arose to solve a technical problem that original typesetters had long since solved.&lt;/p&gt;
&lt;h2 id=&#34;monospaced-font&#34;&gt;Monospaced Font&lt;/h2&gt;
&lt;p&gt;A monospaced font is a font that has a &amp;ldquo;fixed with&amp;rdquo;. When you look at a word in a monospaced font, it&amp;rsquo;s not that each character is the same size, but rather the area that contains each character is the same size.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/monospace.png&#34; alt=&#34;Font Spaces&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this image we can see how a monospace font is &amp;ldquo;set&amp;rdquo;. Whenever a character appears on the screen, these &amp;ldquo;boxes&amp;rdquo; surrounding them denote their bounds. In a monospace&amp;rsquo;f font, the bounding box for each character is the same size. The size of the character and its placement within the box may vary - but by standardizing on the bounding box size it will appear that each character is the same &amp;ldquo;width&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This is very cool stuff.&lt;/p&gt;
&lt;p&gt;Since each character has a bounding box that&amp;rsquo;s the same size as every other character we actually run into a very specific instance of a cool typography side-effect known as &lt;a href=&#34;https://en.wikipedia.org/wiki/River_(typography)&#34;&gt;Rivers&lt;/a&gt;. Each character aligns itself perfectly with the character above and below it, creating a giant grid of characters on your screen.&lt;/p&gt;
&lt;p&gt;But this isn&amp;rsquo;t always the best for reading.&lt;/p&gt;
&lt;h2 id=&#34;proportional-font&#34;&gt;Proportional Font&lt;/h2&gt;
&lt;p&gt;A proportional font is one that allows the bounding box for any individual character to vary. This has the side-effect of allowing for much narrow kerning (the space between letters) and does 100% lead to improved legibility (see &lt;a href=&#34;https://journals.sagepub.com/doi/pdf/10.1177/001872088302500303&#34;&gt;this study here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/proportional.png&#34; alt=&#34;Proportional Font&#34;&gt;&lt;/p&gt;
&lt;p&gt;By varying the kerning and allowing each character to use as much space as it needs, font designers can really tweak the legibility of the font.&lt;/p&gt;
&lt;h2 id=&#34;why-does-any-of-this-matter&#34;&gt;Why does any of this matter?&lt;/h2&gt;
&lt;p&gt;We know that monospaced fonts improve the legibility of text in SOME cases, like reading code or if the reader has a disability like dyslexia. In all other cases, proportional fonts improve legibility. Serifs in generally tend to be chosen by popular type users (newspapers for example) because of their legibility.&lt;/p&gt;
&lt;p&gt;All of this means that&amp;hellip; me setting the default font to be a monospace font is actually a problem for legibility. By leaving this setting blank and using the browser defaults, I can ensure that you are reading the content of this site how you would best consume it. I&amp;rsquo;ve taken a lot of time to ensure that things like dark/light modes respect user settings. I&amp;rsquo;ve spent longer than I would have liked getting the right shades of blue/purple (the default unvisited/visited link colors) so that they are the same in dark/light modes. The only thing I didn&amp;rsquo;t do was think about the font - I just set it to monospaced since I like it and went about my day.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve since decided to remove that setting, allowing your browser/system defaults to set the primary font on the site. After all, what matters on this site is the content and you should be able to view that as you&amp;rsquo;d like.&lt;/p&gt;
&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;
&lt;p&gt;The study linked looks specifically at fixed vs. variable letter width (monospace vs. proportional) for televised text. This is particularly relevant since we&amp;rsquo;re talking about screens rather than print. The differences cited are also quite marginal - but that&amp;rsquo;s the point of this font change. To the majority of users it won&amp;rsquo;t make a difference, but to a small few it will matter a lot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running a Git Server</title>
      <link>https://xangelo.ca/posts/running-a-git-server/</link>
      <pubDate>Wed, 30 Mar 2022 11:08:53 -0800</pubDate>
      
      <guid>https://xangelo.ca/posts/running-a-git-server/</guid>
      <description>&lt;h1 id=&#34;running-your-own-git-server&#34;&gt;Running your own Git server&lt;/h1&gt;
&lt;p&gt;Following this theme of owning your digital space I wanted to do a quick post on what it takes to run your own git server. There are a bunch of services out there like that will host your git repositories for free (I personally recommend &lt;a href=&#34;https://sourcehut.org/&#34;&gt;sourcehut&lt;/a&gt;), but you can get a most of what they offer for free with &lt;a href=&#34;https://xangelo.ca/posts/gitweb/&#34;&gt;gitweb&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;why-would-you-want-to-do-this&#34;&gt;Why would you want to do this?&lt;/h2&gt;
&lt;p&gt;Honestly it&amp;rsquo;s not as complicated as you would think to run your own git server and get almost all the same functionality from popular forges. Running your own git server doesn&amp;rsquo;t mean you can&amp;rsquo;t use something like GitHub or GitLab - it&amp;rsquo;s not a one or the other choice. You can host all your repos on your own VPS while still pushing to GitHub/GitLab to ensure that you can still take advantage of their social networks.&lt;/p&gt;
&lt;p&gt;For me the biggest precursor to hosting my own repos was just to get more familiar with git. I&amp;rsquo;ve been using git for a number of years, but it was only in the last year or so that I really started digging into all the functionality that it offers.&lt;/p&gt;
&lt;p&gt;In addition to that there&amp;rsquo;s a huge difference in complexity between running your own server, and running a service for millions of others to consume. As GitHub grows (both in size and in feature set) the likelihood of any one piece of it being down also grows. If we look at the &lt;a href=&#34;https://www.githubstatus.com/history&#34;&gt;Incident History&lt;/a&gt; of GitHub from Jan 2022  to March 2022 we can see that some piece of it has been dozens of incidents and outages. Using git allows you to bypass a lot of those problems, but centralizing on any hosted forge will always come with these inherent risks. It&amp;rsquo;s much better to use hosted forges as secondary locations and just host your own git repos.&lt;/p&gt;
&lt;h2 id=&#34;what-do-you-need&#34;&gt;What do you need?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Server - You need somewhere to host your git server. Personally I use &lt;a href=&#34;&#34;&gt;Digital Ocean&lt;/a&gt; but you are free to use anything that gives you ssh access and an IP address.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll need root access to that server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s it. Those are the minimum requirements to actually host your git repos elsewhere. Everything else on top of that is just extra functionality and we&amp;rsquo;ll talk about those later.&lt;/p&gt;
&lt;h3 id=&#34;a-server&#34;&gt;A Server&lt;/h3&gt;
&lt;p&gt;The easiest thing to do would be to spin up a brand new server on a cloud platform like &lt;a href=&#34;https://digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt;. It costs approx 5$ CAD and is probably one of the cheaper shared hosts you can find. You don&amp;rsquo;t need anything fancy because the git repos actually do nothing the majority of the time. There&amp;rsquo;s only activity on them when you push/pull.&lt;/p&gt;
&lt;p&gt;If you spin up a droplet (server) in Digital Ocean it will provide you the ability to set up your root credentials. Personally I&amp;rsquo;d suggest using an SSH key! It&amp;rsquo;s a heck of a lot easier than typing in your password every time you try and connect.&lt;/p&gt;
&lt;h4 id=&#34;ssh-keygen&#34;&gt;ssh-keygen&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>gitweb - a GitHub/GitLab alternative</title>
      <link>https://xangelo.ca/posts/gitweb/</link>
      <pubDate>Thu, 24 Mar 2022 01:29:37 -2900</pubDate>
      
      <guid>https://xangelo.ca/posts/gitweb/</guid>
      <description>&lt;h2 id=&#34;owning-your-digital-space&#34;&gt;Owning Your Digital Space&lt;/h2&gt;
&lt;p&gt;Over the last year or so I&amp;rsquo;ve slowly pushed further and further into the idea of
owning your digital space. Part of that has been re-evaluating all of the
services online that I think of as &amp;ldquo;necessary&amp;rdquo;. One of these such services has
been GitHub.&lt;/p&gt;
&lt;p&gt;The more I dive into development processes the more I find that they are all
centered around the idea that in order for you to be a &amp;ldquo;developer&amp;rdquo; it mostly
requires that you buy into the idea of centralized forges like GitHub/GitLab.
But these very ideas make it harder and harder to actually get work done. All
development over the last few years has been about dealing with changes that
GitHub has brought about. Don&amp;rsquo;t get me wrong - GitHub really does have some
wonderful services and they&amp;rsquo;ve done a lot for visibility and getting people
involved in OS projects.&lt;/p&gt;
&lt;p&gt;But they definitely shouldn&amp;rsquo;t be the only game in town.&lt;/p&gt;
&lt;p&gt;In an attempt to take some control back from the major forges, I&amp;rsquo;ve been
experimenting with a small tool called gitweb.&lt;/p&gt;
&lt;h2 id=&#34;gitweb&#34;&gt;gitweb&lt;/h2&gt;
&lt;p&gt;gitweb is a very simple tool - it allows you to browse all the git repositories
within a specified folder. You simply install gitweb, point nginx over to it,
and edit a single configuration file. You immediately get&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A browser for all local git projects&lt;/li&gt;
&lt;li&gt;A tree view for your repos with raw file previews&lt;/li&gt;
&lt;li&gt;Commit history w/ colorized diffs&lt;/li&gt;
&lt;li&gt;Snapshot downloads&lt;/li&gt;
&lt;li&gt;RSS feed tracking commit history&lt;/li&gt;
&lt;li&gt;Search (with regex) throughout your repos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For personal projects, or even for small collaborative projects gitweb provides
more than enough functionality.&lt;/p&gt;
&lt;p&gt;The two features that I think are missing from gitweb are Issue Tracking and
Merge Requests. I don&amp;rsquo;t think these are necessarily features that have any place
in gitweb itself, but it means as a replacement for a centralized forge today,
you probably need to rely on additional tooling.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-gitweb&#34;&gt;Setting up gitweb&lt;/h2&gt;
&lt;p&gt;Actually setting up gitweb was surprisingly easy.&lt;/p&gt;
&lt;h3 id=&#34;installing-gitweb&#34;&gt;Installing gitweb&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install gitweb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;configuring-gitweb&#34;&gt;Configuring gitweb&lt;/h3&gt;
&lt;p&gt;The gitweb configuration file is located at &lt;code&gt;/etc/gitweb.conf&lt;/code&gt;. Installing
gitweb automatically populates this file with some of the defaults. It&amp;rsquo;s a very tiny
file and honestly you don&amp;rsquo;t need to touch most of it to get going. The only
thing that&amp;rsquo;s required is setting the &lt;code&gt;$projectroot&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-inf&#34; data-lang=&#34;inf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$projectroot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/gitfolders&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;configuring-nginx&#34;&gt;Configuring nginx&lt;/h3&gt;
&lt;p&gt;Most of the tutorials about getting gitweb going seem to be primarily apache
related. I haven&amp;rsquo;t personally used apache in close to 10 years now - mostly
living in nginx land. Here&amp;rsquo;s a very short snippet to get your nginx config going
to actually serve gitweb.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;git.xangelo.ca&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/index.cgi&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/share/gitweb/&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;fastcgi_params&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;gzip&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fastcgi_param&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;SCRIPT_NAME&lt;/span&gt; $uri;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fastcgi_param&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;GITWEB_CONFIG&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/gitweb.conf&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fastcgi_pass&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;unix:/var/run/fcgiwrap.socket&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/share/gitweb/&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;index.cgi&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;All the paths included are the default locations of things gitweb configures.
The entire block should work for you if you just change the &lt;code&gt;server_name&lt;/code&gt;
directive.&lt;/p&gt;
&lt;h2 id=&#34;further-customizing&#34;&gt;Further Customizing&lt;/h2&gt;
&lt;p&gt;Unfortunately not all the configuration options are specified in the
configuration file that&amp;rsquo;s generated. Reading the source will get you a list
pretty quick but if you don&amp;rsquo;t feel like it, here&amp;rsquo;s a few other params I changed
up.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-inf&#34; data-lang=&#34;inf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sets the title in the &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; html tag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$site_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My Site&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# by default the root of your gitweb is called &amp;#34;projects&amp;#34;. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# I simply changed that to Home and explicitly set the url &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# that users get directed to when they click it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$home_link_str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Home&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$home_link&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://git.xangelo.ca&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# There&amp;#39;s a small &amp;#34;Header&amp;#34; section above the project listing &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# that you can customize with whatever text you want. This &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# allows you to specify an html  file that should be used &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in that area&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$home_text&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/file.html&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# since all of these repos are mine, I don&amp;#39;t list the owner&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# so I&amp;#39;ve disabled this prop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$omit_owner&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Git Docs: &lt;a href=&#34;https://git-scm.com/docs/gitweb.html&#34;&gt;https://git-scm.com/docs/gitweb.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gitweb Source: &lt;a href=&#34;https://repo.or.cz/w/git.git/tree/HEAD:/gitweb/&#34;&gt;https://repo.or.cz/w/git.git/tree/HEAD:/gitweb/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My projects: &lt;a href=&#34;https://git.xangelo.ca&#34;&gt;https://git.xangelo.ca&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My i3wm Setup</title>
      <link>https://xangelo.ca/posts/i3/</link>
      <pubDate>Fri, 18 Mar 2022 12:16:36 -1600</pubDate>
      
      <guid>https://xangelo.ca/posts/i3/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently made the switch from the stock Ubuntu setup over to i3wm. I&amp;rsquo;ve
used xmonad for many years before this, but always found it a bit harder than I
would have liked to customize it.&lt;/p&gt;
&lt;p&gt;Most of what i3 does out of the box works perfectly for me. The only thing I
didn&amp;rsquo;t like was the fact that navigation was shifted from &lt;code&gt;hjkl&lt;/code&gt; to &lt;code&gt;jkl;&lt;/code&gt;. I&amp;rsquo;m
also not a big fan of dmenu. Honestly I&amp;rsquo;m not totally sure why, but I&amp;rsquo;ve always
struggled getting it to do what I wanted.&lt;/p&gt;
&lt;p&gt;With i3 I made a few small config changes, and swapped out the launcher and so
far things have been quite excellent. I&amp;rsquo;m just posting this here so that I
don&amp;rsquo;t forget my configs.&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;h2 id=&#34;my-config&#34;&gt;My Config&lt;/h2&gt;
&lt;p&gt;As a vim user, I&amp;rsquo;m much more comfortable with the default vim bindings, than the &amp;ldquo;1 ket to the right&amp;rdquo; bindings that i3 tends to use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Reviews Are Failure</title>
      <link>https://xangelo.ca/posts/code-reviews-are-failure/</link>
      <pubDate>Thu, 24 Feb 2022 11:05:34 -0500</pubDate>
      
      <guid>https://xangelo.ca/posts/code-reviews-are-failure/</guid>
      <description>&lt;h2 id=&#34;code-reviews-are-afailure&#34;&gt;Code Reviews are a Failure&lt;/h2&gt;
&lt;p&gt;As a new startup with one or two engineers on staff, you&amp;rsquo;re very likely not doing code reviews. Engineers at this stage have a very deep understanding of the code - after all, they&amp;rsquo;ve probably written most of it. When it&amp;rsquo;s time for a new feature, these initial developers know exactly how they&amp;rsquo;re going to implement it given the architecture of their code base. Chances are, they keep their own work in a branch, and open a Pull Request or Merge Request, but they aren&amp;rsquo;t asking someone to take a look at it. Instead they&amp;rsquo;re making sure their changes work and they&amp;rsquo;re merging it in themselves. Often they&amp;rsquo;ll do this many times a day as they crank out features and bug fixes.&lt;/p&gt;
&lt;p&gt;At some point things are going better than they were and this small group of engineers start adding more! Now you have 5 or 6 engineers, all with varying familiarity of your code base. This is generally the first time Code Reviews come about - and normally for good reason. Often someone has pushed some code to production that has broken things and the developers take a step back and realize that maybe before they push code, it&amp;rsquo;s best if they have others review it. Perhaps bugs like this can be caught next time. And so they come up with rules and reasons for why they need Code Reviews. Non technical managers think &amp;ldquo;Ah, this won&amp;rsquo;t happen again - we&amp;rsquo;re instituting code reviews now!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve all seen the reasons for Code Reviews:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find bugs further downstream&lt;/li&gt;
&lt;li&gt;Propagation of Knowledge&lt;/li&gt;
&lt;li&gt;Team Ownership&lt;/li&gt;
&lt;li&gt;Double check functionality/architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are nonsense - Code Reviews in isolation almost always end up with the following results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reviews languishing in a &amp;ldquo;Ready for Review&amp;rdquo; state&lt;/li&gt;
&lt;li&gt;Drastic code architecture changes&lt;/li&gt;
&lt;li&gt;Being &amp;ldquo;Approved&amp;rdquo; based on social standing of the developer opening the request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code Reviews are often seen as some kind of magic bullet to catching errors before they get merged into code bases. The ideal is that a developer gets a ticket, makes some code changes, and then shares those changes with everyone else on the team for feedback. The idea is that other developers, with perhaps more context, can catch potential issues or side-effects in the code that the developer doing the work may not have even known about.&lt;/p&gt;
&lt;p&gt;Why the heck are you waiting until things are &amp;ldquo;Ready for Review&amp;rdquo; before you share you knowledge and context with the developer doing the task? Why are you telling them to &amp;ldquo;open a draft request as they go&amp;rdquo; so that you can share with them little tidbits of knowledge along the way.&lt;/p&gt;
&lt;p&gt;Why do Code Reviews fail? Because it moves in-depth planning to the end of the development process once someone is already &amp;ldquo;done&amp;rdquo; mentally with a task.&lt;/p&gt;
&lt;h2 id=&#34;the-opposite-of-codereviews&#34;&gt;The Opposite of Code Reviews&lt;/h2&gt;
&lt;p&gt;The opposite of Code Reviews isn&amp;rsquo;t NO code reviews.&lt;/p&gt;
&lt;p&gt;The opposite of Code Reviews is Planning!&lt;/p&gt;
&lt;p&gt;Let me regale you with tales of how development works in the Open Source world. I specifically pick the Open Source community because they operate the opposite way of most startups. Both have no budget, but OS communities have much longer (almost.. undefined in some cases) delivery times for new features. But not just any Open Source community - I&amp;rsquo;m specifically going to target communities that were around before 2008. Old Open Source. I&amp;rsquo;m doing this specifically to highlight not just the mechanisms that were used, but also how they contributed to this default of Planning over Code Reviews.&lt;/p&gt;
&lt;p&gt;When a new feature was proposed - it didn&amp;rsquo;t just appear on an issue board somewhere. Instead someone had to find the mailing list for a piece of software, get ON that mailing list, and then send an email to the development group explaining in detail what your feature was. If you were not clear, chances are you&amp;rsquo;d simply receive a short email asking for more explanation about a certain part, or possibly just outright dismissal of your idea. In either case, you&amp;rsquo;d end up needing to explain yourself further.&lt;/p&gt;
&lt;p&gt;At some point someone on the development team might agree that your idea should be a feature. At this point, they start digging into the code. They probably aren&amp;rsquo;t making the changes you need for your feature, but they&amp;rsquo;re validating how they would go about implementing it. A followup email you may receive would actually include code snippets, specific files/line-numbers to reference, and links to external documentation.&lt;/p&gt;
&lt;p&gt;This all happens in public. Other developers that see that email may realize that they have more context, and will chime in with additional edge cases, more documentation, maybe more code! This will likely go on for a while. Days is obscenely fast. Weeks is more reasonable. Eventually what will happen is that you&amp;rsquo;ll end up with an email that details the goals for the feature, and a flurry of emails outlining the best way to go about it - complete with links to documentation, code, and even code snippets to implement the feature.&lt;/p&gt;
&lt;p&gt;The goal for this email activity isn&amp;rsquo;t to code the feature - it&amp;rsquo;s to get it to the point that anyone can pick up this email chain and implement the feature based on the knowledge shared up front.&lt;/p&gt;
&lt;p&gt;Once that&amp;rsquo;s done, the developer may still run into cases they didn&amp;rsquo;t think about and may message the group again. But often, things are planned out enough that the developer implementing the feature can solve the problem. This completed code is sent back to the group/maintainer for Integration. The &amp;ldquo;Code Review&amp;rdquo; at this stage is simply to make sure that things are happening as expected, to do one last check of the code, and to actually merge the changes in and test things.&lt;/p&gt;
&lt;p&gt;Now, there&amp;rsquo;s plenty of problems with this process - but the Code Review is rarely one of them.&lt;/p&gt;
&lt;h2 id=&#34;the-advent-of-codereviews&#34;&gt;The Advent of Code Reviews&lt;/h2&gt;
&lt;p&gt;I want to place the blame squarely on GitHub for enabling and promoting Code Reviews, via mostly circumstantial evidence.&lt;/p&gt;
&lt;p&gt;Prior to GitHub contributing to an Open Source project required you to get involved in the developer community for the project before submitting code. After GitHub anyone can stumble across a repo and open a Pull Request with code changes - without discussing anything at all.&lt;/p&gt;
&lt;p&gt;That mentality has premeated current development processes everywhere. Now when you start work on a task, instead of having all the information/discussion up front the developer is expected to seek it out. They&amp;rsquo;re expected to not just figure out that they may be missing information, but also figure out the best person to ask to find out what they&amp;rsquo;re missing. The developer is immediately set up for failure unless they already know the codebase well. At any sufficiently large enough project, that is very unlikely to be the case.&lt;/p&gt;
&lt;p&gt;Instead you end up open a code review that sits in review for days while engineers chime in with little fixes, slightly better ways of going about things, while you scramble to implement them and get your code reviewed again and again. Of course, some places recognize this problem and simply outlaw large scale architecture changes at this stage even if they are completely warranted.&lt;/p&gt;
&lt;p&gt;See the problem isn&amp;rsquo;t that the Code Review is bad - it&amp;rsquo;s that the Code Review is the first time anyone has actually looked at the code related to the problem.&lt;/p&gt;
&lt;h2 id=&#34;the-solution-to-code-reviews&#34;&gt;The Solution to Code Reviews&lt;/h2&gt;
&lt;p&gt;There isnt one.&lt;/p&gt;
&lt;p&gt;All planning up front without a deadline isn&amp;rsquo;t helpful. All work without planning is pointless. But where your team draws the line between planning that&amp;rsquo;s &amp;ldquo;good enough&amp;rdquo; and the length of time attributed to feature development changes frequently. It changes based on team composition, it changes based on the company state, it changes based on the market your company operates in. The only thing that&amp;rsquo;s certain is that the amount of planning from feature to feature will be different.&lt;/p&gt;
&lt;p&gt;You have to be able to make a call at some point that the planning is enough. But if your planning doesn&amp;rsquo;t include pseudo code and links to code in the project, chances are it&amp;rsquo;s not enough planning.&lt;/p&gt;
&lt;p&gt;Planning should not be a single person event either. The whole team that would participate in the code review should be participating in the planning process as well.&lt;/p&gt;
&lt;p&gt;Once the planning is done and a developer completes the code change, the Code Review needs to happen. At this point generally it&amp;rsquo;s about testing change rather than re-architecting how the change is made. When we&amp;rsquo;re at this stage, there&amp;rsquo;s even more tools at our disposal!&lt;/p&gt;
&lt;p&gt;Unit tests, Integration Tests, Synthetic/BlackBox Tests - all of these can help ease the time code spends stuck in code reviews. By minimizing the time spent in code reviews, and maximizing the time spent in planning instead we can achieve things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actually find bugs further downstream and upstream&lt;/li&gt;
&lt;li&gt;Propagation of Knowledge throughout the team&lt;/li&gt;
&lt;li&gt;Team Ownership of a feature&lt;/li&gt;
&lt;li&gt;Double check functionality/architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How fun.&lt;/p&gt;
&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This was originally published on Medium - &lt;a href=&#34;https://xangelo.medium.com/code-reviews-are-a-failure-36b72a659de4&#34;&gt;https://xangelo.medium.com/code-reviews-are-a-failure-36b72a659de4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Discovering Problems as a Manager</title>
      <link>https://xangelo.ca/posts/discovering-problems-as-manager/</link>
      <pubDate>Mon, 01 Nov 2021 17:11:57 -1100</pubDate>
      
      <guid>https://xangelo.ca/posts/discovering-problems-as-manager/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
